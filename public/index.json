[{"content":"I have been using Ruby on Rails quite a lot lately due to its extremely rapid way to build proof of concepts for web applications.\nHowever, I\u0026rsquo;m typically using haml for the view templates, and bulma as css framework.\nHaml haml is a templating engine with the goal:\nHaml (HTML abstraction markup language) is based on one primary principle: markup should be beautiful.\nIt replaces HTML templates like:\n\u0026lt;section class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;%= post.title %\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;\u0026lt;%= post.subtitle %\u0026gt;\u0026lt;/h2\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;%= post.content %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; with\n%section.container %h1= post.title %h2= post.subtitle .content = post.content The haml gem is quite well documented. To use it in rails, first, install it and the helper tool:\n% bundle add haml-rails % bundle add html2haml Then, you can convert the exising .html.erb files to .html.haml files:\n$ rails generate haml:application_layout convert Finally, you have to remove the application.html.erb file. Or, you can convert all your erb files to haml:\n$ rails haml:erb2haml This will also ask you if you want to delete all the erb files.\nBulma I picked bulma as the css framework after many years of working with purecss mainly becouse bulma offered better responsive designs, particularly when it came to responsive navigation menus.\nTo use bulma with rails, you have to do the following modifications:\nAdd the stylesheet to the header:\n%html %head %meta{:content =\u0026gt; \u0026#34;text/html; charset=UTF-8\u0026#34;, \u0026#34;http-equiv\u0026#34; =\u0026gt; \u0026#34;Content-Type\u0026#34;}/ ... = stylesheet_link_tag \u0026#34;https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css\u0026#34; Then use container and apply it to all the elements of the body:\n%body %section.section # added .container # added = yield That\u0026rsquo;s it. Now you have the default fonts and colors of bulma.\nObviously, if you want to make forms look nicer you have to change the auto-generated erb / haml files. A good guide is at the bulma forms documentation.\nThis gives some tips and trick for Ruby on Rails.\nEnums There are many sites explaining how to use enums in rails, but all of them describe the use case where the enum is stored as an integer in the database.\nMy much more frequent use case is using strings in the database. I found this on stackoverflow which gives a good way to do it:\nclass Work \u0026lt; ApplicationRecord enum status: %i[canceled offering running payment rating done].index_with(\u0026amp;:to_s) end Then, in the view, you can use:\nform.select :status, Work::stati # or statuses? Quick reference I found an excellent quick reference guide to Ruby on zenspider.\nMore complex associations I asked this to chatGPT:\nUsing ruby active record, how can I model the following situation: An order has a supplier of class BusinessPartner, and a producer also of class BusinessPartner. How is the ruby code for the model and for the database migrations\nI got the following response\nTo model this scenario in Ruby on Rails using Active Record, where an Order has both a supplier and a producer, each of which belongs to the same class BusinessPartner, you can use the concept of self-referential associations with polymorphic-like relationships. This allows you to associate the BusinessPartner model in two different roles within the Order model.\nStep 1: Database Migrations You\u0026rsquo;ll need to set up your database tables to accommodate these associations. Here\u0026rsquo;s how you can create the necessary migrations.\n1.1 Create the BusinessPartner model and migration: rails generate model BusinessPartner name:string This will generate a migration file. Make sure it looks like this:\n# db/migrate/20241113000001_create_business_partners.rb class CreateBusinessPartners \u0026lt; ActiveRecord::Migration[7.0] def change create_table :business_partners do |t| t.string :name, null: false t.timestamps end end end 1.2 Create the Order model and migration: rails generate model Order supplier_id:integer producer_id:integer This will generate another migration file. Update it as follows:\n# db/migrate/20241113000002_create_orders.rb class CreateOrders \u0026lt; ActiveRecord::Migration[7.0] def change create_table :orders do |t| t.references :supplier, null: false, foreign_key: { to_table: :business_partners } t.references :producer, null: false, foreign_key: { to_table: :business_partners } t.timestamps end end end 1.3 Run the Migrations Run the migrations to create the tables:\nrails db:migrate Step 2: Model Setup Now, let\u0026rsquo;s set up the Ruby models to reflect this relationship.\n2.1 BusinessPartner Model # app/models/business_partner.rb class BusinessPartner \u0026lt; ApplicationRecord has_many :supplied_orders, class_name: \u0026#39;Order\u0026#39;, foreign_key: \u0026#39;supplier_id\u0026#39; has_many :produced_orders, class_name: \u0026#39;Order\u0026#39;, foreign_key: \u0026#39;producer_id\u0026#39; end 2.2 Order Model # app/models/order.rb class Order \u0026lt; ApplicationRecord belongs_to :supplier, class_name: \u0026#39;BusinessPartner\u0026#39; belongs_to :producer, class_name: \u0026#39;BusinessPartner\u0026#39; end Step 3: Using the Models Now that the models and migrations are set up, you can create BusinessPartner records and associate them with Order records:\n3.1 Creating Business Partners supplier = BusinessPartner.create(name: \u0026#39;Supplier Co.\u0026#39;) producer = BusinessPartner.create(name: \u0026#39;Producer Ltd.\u0026#39;) 3.2 Creating an Order order = Order.create(supplier: supplier, producer: producer) 3.3 Querying the Data # Fetch the supplier for an order order.supplier # Fetch the producer for an order order.producer # List all orders supplied by a specific business partner supplier.supplied_orders # List all orders produced by a specific business partner producer.produced_orders Explanation The Order model has two foreign keys, supplier_id and producer_id, both referencing the BusinessPartner model. The belongs_to association in the Order model specifies class_name: 'BusinessPartner' to indicate that these associations point to the BusinessPartner model. The BusinessPartner model includes has_many associations with customized foreign keys, allowing you to fetch orders where the partner is either a supplier or a producer. This approach is clean and efficient, leveraging Rails\u0026rsquo; built-in association features without requiring polymorphic associations since both supplier and producer are of the same type (BusinessPartner).\nActiveRecords associations I have for the longest time been confused about how the associations are mapped to the database tables.\nA fairly good documentation can be found in the ActiveRecord documentation.\nFor my own help I created this table, the shows how the migrations, the generated models, and the sql statements fit together.\nModel A Model B Migration bin/rails g model A title:string bin/rails g model B title:string a:references Migration code class CreateAs \u0026lt; ActiveRecord::Migration[7.1] def change create_table :as do |t| t.string :title t.timestamps end end end class CreateBs \u0026lt; ActiveRecord::Migration[7.1] def change create_table :bs do |t| t.string :title t.references :a, null: false, foreign_key: true t.timestamps end end end Models class A \u0026lt; ApplicationRecord has_one :b end class B \u0026lt; ApplicationRecord belongs_to :a end Schema create_table \u0026#34;as\u0026#34;, force: :cascade do |t| t.string \u0026#34;title\u0026#34; t.datetime \u0026#34;created_at\u0026#34;, null: false t.datetime \u0026#34;updated_at\u0026#34;, null: false end create_table \u0026#34;bs\u0026#34;, force: :cascade do |t| t.string \u0026#34;title\u0026#34; t.integer \u0026#34;a_id\u0026#34;, null: false t.datetime \u0026#34;created_at\u0026#34;, null: false t.datetime \u0026#34;updated_at\u0026#34;, null: false t.index [\u0026#34;a_id\u0026#34;], name: \u0026#34;index_bs_on_a_id\u0026#34; end add_foreign_key \u0026#34;bs\u0026#34;, \u0026#34;as\u0026#34; Database CREATE TABLE IF NOT EXISTS \u0026#34;as\u0026#34; (\u0026#34;id\u0026#34; integer PRIMARY KEY AUTOINCREMENT NOT NULL, \u0026#34;title\u0026#34; varchar, \u0026#34;created_at\u0026#34; datetime(6) NOT NULL, \u0026#34;updated_at\u0026#34; datetime(6) NOT NULL); CREATE TABLE IF NOT EXISTS \u0026#34;bs\u0026#34; (\u0026#34;id\u0026#34; integer PRIMARY KEY AUTOINCREMENT NOT NULL, \u0026#34;title\u0026#34; varchar, \u0026#34;a_id\u0026#34; integer NOT NULL, \u0026#34;created_at\u0026#34; datetime(6) NOT NULL, \u0026#34;updated_at\u0026#34; datetime(6) NOT NULL, CONSTRAINT \u0026#34;fk_rails_ddf8c0c4b5\u0026#34; FOREIGN KEY (\u0026#34;a_id\u0026#34;) REFERENCES \u0026#34;as\u0026#34; (\u0026#34;id\u0026#34;) ); CREATE INDEX \u0026#34;index_bs_on_a_id\u0026#34; ON \u0026#34;bs\u0026#34; (\u0026#34;a_id\u0026#34;); The foreign key index is generated on the belongs_to class.\nCreating a = A.new(title: \u0026#39;hallo A\u0026#39;) a.save! ==\u0026gt; INSERT INTO \u0026#34;as\u0026#34; (\u0026#34;title\u0026#34;, \u0026#34;created_at\u0026#34;, \u0026#34;updated_at\u0026#34;) VALUES (?, ?, ?) RETURNING \u0026#34;id\u0026#34; [[\u0026#34;title\u0026#34;, \u0026#34;hallo A\u0026#34;], [\u0026#34;created_at\u0026#34;, \u0026#34;2024-03-16 08:20:14.170060\u0026#34;], [\u0026#34;updated_at\u0026#34;, \u0026#34;2024-03-16 08:20:14.170060\u0026#34;]] b = B.new(title: \u0026#39;hallo B\u0026#39;) b.save! ==\u0026gt; `raise_validation_error\u0026#39;: Validation failed: A must exist (ActiveRecord::RecordInvalid) b must have an association to a when saving.\nb = B.new(title: \u0026#39;hallo B\u0026#39;, a: a) b.save! TRANSACTION (0.1ms) begin transaction B Create (2.9ms) INSERT INTO \u0026#34;bs\u0026#34; (\u0026#34;title\u0026#34;, \u0026#34;a_id\u0026#34;, \u0026#34;created_at\u0026#34;, \u0026#34;updated_at\u0026#34;) VALUES (?, ?, ?, ?) RETURNING \u0026#34;id\u0026#34; [[\u0026#34;title\u0026#34;, \u0026#34;hallo B\u0026#34;], [\u0026#34;a_id\u0026#34;, 4], [\u0026#34;created_at\u0026#34;, \u0026#34;2024-03-16 08:25:29.621566\u0026#34;], [\u0026#34;updated_at\u0026#34;, \u0026#34;2024-03-16 08:25:29.621566\u0026#34;]] TRANSACTION (0.9ms) commit transaction This creates a and the associated b.\nAccess Access to the reference via the foreign key:\nA.find(4).b A Load (0.2ms) SELECT \u0026#34;as\u0026#34;.* FROM \u0026#34;as\u0026#34; WHERE \u0026#34;as\u0026#34;.\u0026#34;id\u0026#34; = ? LIMIT ? [[\u0026#34;id\u0026#34;, 4], [\u0026#34;LIMIT\u0026#34;, 1]] B Load (0.2ms) SELECT \u0026#34;bs\u0026#34;.* FROM \u0026#34;bs\u0026#34; WHERE \u0026#34;bs\u0026#34;.\u0026#34;a_id\u0026#34; = ? LIMIT ? [[\u0026#34;a_id\u0026#34;, 4], [\u0026#34;LIMIT\u0026#34;, 1]] Access with two sequential selects.\nB.find(3).a B Load (0.2ms) SELECT \u0026#34;bs\u0026#34;.* FROM \u0026#34;bs\u0026#34; WHERE \u0026#34;bs\u0026#34;.\u0026#34;id\u0026#34; = ? LIMIT ? [[\u0026#34;id\u0026#34;, 3], [\u0026#34;LIMIT\u0026#34;, 1]] A Load (0.1ms) SELECT \u0026#34;as\u0026#34;.* FROM \u0026#34;as\u0026#34; WHERE \u0026#34;as\u0026#34;.\u0026#34;id\u0026#34; = ? LIMIT ? [[\u0026#34;id\u0026#34;, 4], [\u0026#34;LIMIT\u0026#34;, 1]] what One-liners A very interesting blog on using ruby one-lines, mainly with text files, was found under Ruby One.liners.\nInstance variables and class instance variables This is totally confusing when coming from another programming language. I found a fairly good explanation of instance variables and class instance variables here.\n","permalink":"http://localhost:1313/post/2024-11-12-rails-tips/","summary":"\u003cp\u003eI have been using \u003ca href=\"https://guides.rubyonrails.org/index.html\"\u003eRuby on Rails\u003c/a\u003e quite a lot lately due to its extremely rapid way to build proof of concepts for web applications.\u003c/p\u003e","title":"Ruby on Rails ticks and trips"},{"content":"I have been using Pure.css in most of my applications since it is really simple to use.\nThis is a small code sample that uses Pure.css with a responsive, vertical menu with hamburger and a submenu.\nSo it posed two challenges:\nresponsive vertical menu with hamburger submenus The given code is available on my github.\nSubmenus Pure.css does a fairly good job explaining how to do submenus in their documentation Vertical Menu with Submenu\nUnfortunately, this code did not show the submenu. It took me some time to understand the line:\n\u0026lt;div class=\u0026#34;pure-menu custom-restricted-width\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;pure-menu-list\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt; The trick lies in the custom-restricted-width. I finally set this in the style sheet:\n.custom-restricted-width { display: inline-block; } Responsive vertical menu I took this example from the provided Pure.css layouts on Side Menu, with the associated styles.css and ui.js.\nI had tried ChatGPT to generate the code, but it didn\u0026rsquo;t work.\nCaveats I noticed that the style sheet sets the width of the vertical menu to 150px. Just changing the width is not so simple, because then suddenly the hamburger disappears. This restricts the length of the menu texts, but I ended up not changing this.\nUsage Just download the three files from github and open simple_index_vertical_menu.html in your favorite browser.\nFontAwesome Font Awesome is a good source for any kind of icons. However, they have hidden their CDN, since they prefer that you log in to get more information.\nThe CDN is here:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css\u0026#34; integrity=\u0026#34;sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg==\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; referrerpolicy=\u0026#34;no-referrer\u0026#34; /\u0026gt; And the free icons can be found here: Font Awesome free icons.\n","permalink":"http://localhost:1313/post/2024-07-27-purecss-menu/","summary":"\u003cp\u003eI have been using \u003ca href=\"https://purecss.io/\"\u003ePure.css\u003c/a\u003e in most of my applications since it is really simple to use.\u003c/p\u003e\n\u003cp\u003eThis is a small code sample that uses \u003ca href=\"https://purecss.io/\"\u003ePure.css\u003c/a\u003e with a responsive, vertical menu with hamburger and a submenu.\u003c/p\u003e","title":"A vertical responsive menu with PureCSS"},{"content":"Pure.css is a css framework that does not include JavaScript like other frameworks such as Vue, bootstrap, \u0026hellip;\nIn contrast to those frameworks:\nPure is ridiculously tiny. The entire set of modules clocks in at 3.5KB minified and gzipped. Crafted with mobile devices in mind, it was important to us to keep our file sizes small, and every line of CSS was carefully considered.\nI like it because of its extremely simple usage, particulary for the small development web servers I\u0026rsquo;m working in Ruby or go.\nI have only had some quirks with it when designing responsive menus for mobile devices. There is a story on that.\nAdding pure.css in Rails There are two ways to add Pure.css to your rails application:\nadding the style sheet link adding the asset Stylesheet To add the link to the stylesheet on CDN, use this line:\n\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My Title\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width,initial-scale=1\u0026#34;\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;%= stylesheet_link_tag \u0026#34;application\u0026#34;, \u0026#34;data-turbo-track\u0026#34;: \u0026#34;reload\u0026#34; %\u0026gt; \u0026lt;%= javascript_importmap_tags %\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\u0026#34; integrity=\u0026#34;sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; Asset To add it as an asset, do the following.\nAdd the following lines to the asset initializer # config/initializers/assets.rb Rails.application.config.assets.precompile += %w( pure-min.css ) Create a custom CSS file to include the CDN CSS in app/assets/stylesheets/application.css: /* *= require_self *= require_tree . */ @import url(\u0026#34;https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\u0026#34;); Ensure that application.css is included in app/views/layouts/application.html.erb: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;PurecssApp\u0026lt;/title\u0026gt; \u0026lt;%= csrf_meta_tags %\u0026gt; \u0026lt;%= csp_meta_tag %\u0026gt; \u0026lt;%= stylesheet_link_tag \u0026#39;application\u0026#39;, media: \u0026#39;all\u0026#39;, \u0026#39;data-turbo-track\u0026#39;: \u0026#39;reload\u0026#39; %\u0026gt; \u0026lt;%= javascript_include_tag \u0026#39;application\u0026#39;, \u0026#39;data-turbo-track\u0026#39;: \u0026#39;reload\u0026#39; %\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;%= yield %\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Now restart the server Simple index.html index.html\n\u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Simle Pure.CSS index\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure-min.css\u0026#34; integrity=\u0026#34;sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;layout\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pure-menu pure-menu-horizontal\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;pure-menu-heading pure-menu-link\u0026#34;\u0026gt;BRAND\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026#34;pure-menu-list\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;pure-menu-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;pure-menu-link\u0026#34;\u0026gt;News\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;pure-menu-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;pure-menu-link\u0026#34;\u0026gt;Sports\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;pure-menu-item\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;pure-menu-link\u0026#34;\u0026gt;Finance\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Page Title\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2\u0026gt;Sub header\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; Eu aliqua amet nisi magna adipisicing ad. Ullamco adipisicing deserunt ullamco irure elit cupidatat nulla non nulla non adipisicing. Cupidatat ex ex sunt eiusmod. Sunt minim officia Lorem reprehenderit pariatur veniam anim labore. Tempor occaecat nostrud Lorem adipisicing magna aliquip sint ea excepteur laborum eiusmod. Incididunt esse dolor commodo commodo laborum occaecat eu irure excepteur sint dolore qui voluptate sit. Proident incididunt consequat in culpa anim ex occaecat et labore et voluptate. \u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;pure-g\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;pure-u-1-4\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Nulla nisi adipisicing mollit qui irure ullamco fugiat pariatur in velit. Nisi non anim dolor fugiat proident in non veniam veniam magna laborum fugiat sint qui. Incididunt eiusmod Lorem ad est. Elit voluptate Lorem sit id aliquip tempor laboris. Nisi incididunt aute velit non qui consectetur veniam eiusmod esse esse reprehenderit sunt. Commodo excepteur duis mollit nulla. Adipisicing duis magna mollit fugiat aliqua laborum laboris tempor cillum consequat ad.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pure-u-1-4\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Nulla nisi adipisicing mollit qui irure ullamco fugiat pariatur in velit. Nisi non anim dolor fugiat proident in non veniam veniam magna laborum fugiat sint qui. Incididunt eiusmod Lorem ad est. Elit voluptate Lorem sit id aliquip tempor laboris. Nisi incididunt aute velit non qui consectetur veniam eiusmod esse esse reprehenderit sunt. Commodo excepteur duis mollit nulla. Adipisicing duis magna mollit fugiat aliqua laborum laboris tempor cillum consequat ad.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pure-u-1-4\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Nulla nisi adipisicing mollit qui irure ullamco fugiat pariatur in velit. Nisi non anim dolor fugiat proident in non veniam veniam magna laborum fugiat sint qui. Incididunt eiusmod Lorem ad est. Elit voluptate Lorem sit id aliquip tempor laboris. Nisi incididunt aute velit non qui consectetur veniam eiusmod esse esse reprehenderit sunt. Commodo excepteur duis mollit nulla. Adipisicing duis magna mollit fugiat aliqua laborum laboris tempor cillum consequat ad.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pure-u-1-4\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Nulla nisi adipisicing mollit qui irure ullamco fugiat pariatur in velit. Nisi non anim dolor fugiat proident in non veniam veniam magna laborum fugiat sint qui. Incididunt eiusmod Lorem ad est. Elit voluptate Lorem sit id aliquip tempor laboris. Nisi incididunt aute velit non qui consectetur veniam eiusmod esse esse reprehenderit sunt. Commodo excepteur duis mollit nulla. Adipisicing duis magna mollit fugiat aliqua laborum laboris tempor cillum consequat ad.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h2\u0026gt;Another Sub header\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt; Aute Lorem duis commodo dolor mollit exercitation mollit adipisicing elit adipisicing laboris voluptate tempor deserunt. Adipisicing qui occaecat elit do. Non Lorem velit aliquip ipsum quis irure. Est ad ea cillum duis aliquip commodo aute mollit mollit commodo. Anim officia consectetur fugiat qui ipsum anim in duis enim. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; #layout { position: relative; left: 0; padding-left: 0; } .content { margin: 0 auto; padding: 0 2em; max-width: 800px; margin-bottom: 50px; line-height: 1.6em; } .main { padding: 2em; color: black; } \u0026lt;/style\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Note: the piece of html code above is included in the page. The post by Marcus Olsson showed me how to do it.\nUseful links Tutorial: Pure.css\nSample on my github: Pure.css with vertical menu\nResponsive navigation: https://www.codewithfaraz.com/content/20/create-a-responsive-navbar-header-with-pure-css\nhttps://www.geeksforgeeks.org/pure-css/\nhttps://www.geeksforgeeks.org/pure-css-responsive-horizontal-to-scrollable-menu-layout/\nhttps://purecss.io/layouts/tucked-menu/ looks promising,\nhttps://alvarotrigo.com/blog/hamburger-menu-css/ 10 responsive menues\n","permalink":"http://localhost:1313/post/2024-02-03-purecss/","summary":"\u003cp\u003e\u003ca href=\"https://purecss.io\"\u003ePure.css\u003c/a\u003e is a css framework that does not include JavaScript like other frameworks such as Vue, bootstrap, \u0026hellip;\u003c/p\u003e\n\u003cp\u003eIn contrast to those frameworks:\u003c/p\u003e","title":"Pure.css framework"},{"content":"Idea Protocoll buffers are a standard data exchange protocol defined and heavily used by Google.\nProtocol Buffers are language-neutral, platform-neutral extensible mechanisms for serializing structured data.\nThe recommended approach is to define data structures (called messages) in the protobuf language and then generate code stubs for C++, Java, C#, Python, Go, etc.\nHowever, in many cases we are faced with existing modules in Python, C++, Java, .etc and want to interface to them from another programming languages. So we would need to generate the protobuf descriptions based on existing packages.\nPython to Protobuf This article https://dzone.com/articles/python-reflection-how-to-list-modules-and-inspect describes how to get the classes, methods, and packages from an existing Python module.\n","permalink":"http://localhost:1313/draft/2023-12-26-protobuf/","summary":"\u003ch2 id=\"idea\"\u003eIdea\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://protobuf.dev\"\u003eProtocoll buffers\u003c/a\u003e are a standard data exchange protocol defined and heavily used by Google.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eProtocol Buffers are language-neutral, platform-neutral extensible mechanisms for serializing structured data.\u003c/p\u003e","title":"Protobuf and programming languages"},{"content":"This page describes my experiences with the static web site publishing tool Hugo.\nOpen link in new tab There is a discussion which describes How to open links in a new tab.\nYou need to create layouts\\_default\\_markup\\render-link.html with:\n\u0026lt;a href=\u0026#34;{{ .Destination | safeURL }}\u0026#34;{{ with .Title}} title=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ if strings.HasPrefix .Destination \u0026#34;http\u0026#34; }} target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;{{ end }}\u0026gt;{{ .Text | safeHTML }}\u0026lt;/a\u0026gt; Then, in your markdown, when the link is prefixed with http, they will be opened in a new tab.\nHTML on markdown page Normally, HTML on a markdown page is not recognized and you are advised to create a shortcode for it.\nHowever, sometimes you need a table with more complex, multi-line cell entries. Then HTML tables come handy.\nFirst, you have to configure the Goldmark markdown processor to allow it. Change hugo.yaml as follows:\nmarkup: goldmark: renderer: unsafe: true Then create a table as follows; attention that there is an empty line after the \u0026lt;td\u0026gt; element:\n\u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Code\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; ~~~ruby def x(a) end ~~~ \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/tbody\u0026gt; \u0026lt;/table\u0026gt; For an example, see the Ruby Rails Hints page.\nGenerate JSON output Normally, HUGO generates HTML output. However, it is also possible to generate other output formats like JSON.\nSee Hugo custom output formats\noutputs: home: - HTML - RSS - JSON # is necessary Including source code What if you want to include source code in a code example? The post of Marcus Olsson shows how to do it.\nBasically, you need to define a shortcode like this one I use, called layout/shortcodes/include-html-code.html:\n{{- $file := .Get \u0026#34;file\u0026#34;}} {{- with readFile $file }} {{- trim . \u0026#34;\\n\\r\u0026#34; }} {{- end }} The minuses after the curly brackets indicate that the spaces and line breaks are not kept.\nThen in your post, use it as follows:\n{{\u0026lt; include-file file=\u0026#34;static/assets/purecss_index.html\u0026#34; \u0026gt;}} Note: Escaping shortcodes was kaken from Chris Liatas\n","permalink":"http://localhost:1313/post/2023-11-27-hugo-tricks/","summary":"\u003cp\u003eThis page describes my experiences with the static web site publishing tool \u003ca href=\"https://gohugo.io\"\u003eHugo\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"open-link-in-new-tab\"\u003eOpen link in new tab\u003c/h2\u003e\n\u003cp\u003eThere is a discussion which describes \u003ca href=\"https://discourse.gohugo.io/t/how-to-open-plain-url-links-in-a-new-tab/25523/3\"\u003eHow to open links in a new tab\u003c/a\u003e.\u003c/p\u003e","title":"Hugo tips and tricks"},{"content":"Running build-in tomcat server It is possible to deploy Jekyll sites locally, because OSX has a build-in Apache tomcat server. The local sites reside under ~/Sites. However, the setup of this server often changes with new versions of OSX.\nJohn does a great job on documenting how to do this on Apple Community. For the version Sonoma 14.0, these instructions can be seen here.\nFor Ventura, the instructions can be found here.\nIf you follow these instructions, you should be able to run http://localhost/, and it should respond with:\nIt works! If you browse to http://localhost/~mmgreiner/, you should see the files:\nIndex of ~/mmgreiner Or, if you have enabled the english language in /etc/apache2/users/mmgreiner.conf with\nAddLanguage en .en you should see the content of the file ~/Sites/index.html.en, which could be:\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;My site works. File at /Users/mmgreiner/Sites \u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Deploying Jekyll static site locally To deploy your Jekyll generated static sites locally, use\njekyll build --drafts -d ~/Sites/mypages --baseurl \u0026#34;~mmgreiner/mypages\u0026#34; If you now browse to http://localhost/~mmgreiner/mypages/, you should see your Jekyll sites.\nDeploy Hugo locally I later moved all the Jekyll pages to Hugo. To publish and deploy the Hugo site locally, use the following command\nhugo --destination ~/Sites/mypages --baseURL http://localhost/~mmgreiner/mypages Make sure that the destination directory name corresponds to the last name of the baseURL, in this case mypages-hugo.\nPotential problems If the server cannot be found, it may be, that apache is not running. Check with:\napachectl This may throw an error like this:\n% apachectl [Fri Dec 08 09:25:16.726003 2023] [so:error] [pid 18207] AH06663: Unable to find code signature authority on module at /usr/local/opt/php/lib/httpd/modules/libphp.so that matches authority name \u0026#34;Markus Greiner\u0026#34; configured on LoadModule directive. httpd: Syntax error on line 192 of /private/etc/apache2/httpd.conf: Code signing error - not loading module at: /usr/local/opt/php/lib/httpd/modules/libphp.so Basically, this may happen after you have upgraded apachectl. The code needs to be signed again, which is a complex procedure.\nFrom stackoverflow:\nTo fix the above problem, I created Certificate Authority in mac machine by following - https://www.simplified.guide/macos/keychain-ca-code-signing-create and trying to codesign to sign the AEM Dispatcher module with below command\nOnly once, you have to create yourself a certificate. This is in detail described in https://www.simplified.guide/macos/keychain-cert-code-signing-create\nEverytime php is updated, for instance through a brew update command, the libphp.so file needs to be signed again.\nFirst, open Keychain Access, the Keychains, not the passwords. There, check that a certificate for Markus Greiner exists. Now in the terminal, do: % codesign --sign \u0026#34;Markus Greiner\u0026#34; --force --keychain ~/Library/Keychains/login.keychain-db /usr/local/opt/php/lib/httpd/modules/libphp.so Restart the server with:\n% sudo apachectl ","permalink":"http://localhost:1313/post/2023-10-01-local-server/","summary":"\u003ch2 id=\"running-build-in-tomcat-server\"\u003eRunning build-in tomcat server\u003c/h2\u003e\n\u003cp\u003eIt is possible to deploy \u003ca href=\"https://jekyllrb.com\"\u003eJekyll\u003c/a\u003e sites locally, because OSX has a build-in \u003ca href=\"https://tomcat.apache.org\"\u003eApache tomcat server\u003c/a\u003e. The local sites reside under \u003ccode\u003e~/Sites\u003c/code\u003e. However, the setup of this server often changes with new versions of OSX.\u003c/p\u003e","title":"Serving static pages locally"},{"content":" Mermaid is a JavaScript based diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.\nIt can handle\nFlowcharts Sequence Diagram Class Diagram ER Diagram User Journey Gantt Pie Chart Requirement Diagram Gitgraph Diagram C4C Diagram Example Sequence Diagram:\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! Github and github pages support Github now natively supports mermaid, see this article. All you have to do is to mark a code block with mermaid:\ngraph TD A[Client] --\u003e B[Load Balancer] B --\u003e C[Server1] B --\u003e D[Server2] However, this will not work in your local Jekyll deployment. Also, it does not work on Github Pages. The basic problem is:\nGithub requires a code block with language tag mermaid, which translates to: \u0026lt;code class=\u0026#34;language-mermaid\u0026#34;\u0026gt; ... \u0026lt;/code\u0026gt; whereas the local solution and Github Pages require a pre element of class mermaid.\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; ... \u0026lt;/pre\u0026gt; Attempt 1: additional class on code block The first idea was to augment the code block with the class mermaid:\n{.mermaid} ... However, the generated code was:\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt;\u0026lt;code class=\u0026#34;language-mermaid\u0026#34;\u0026gt;graph TD A[Client] --\u0026gt; B[Load Balancer] B --\u0026gt; C[Server1] B --\u0026gt; D[Server2] \u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt; This caused mermaid to throw an error, since it did not recognise the \u0026lt;code\u0026gt; block.\nAttempt 2: only code block We tried a code block with two classes:\n\u0026lt;code class=\u0026#34;mermaid language-mermaid\u0026#34;\u0026gt; ... \u0026lt;/code\u0026gt; Display:\ngraph TD A[Client] --\u003e B[Load Balancer] B --\u003e C[Server1] B --\u003e D[Server2] Again, we get a mermaid error locally and on Github Pages since it is not a pre html element.\nTest with element Using a pre html element will display fine locally and on Github Pages, but not on Github:\n\u0026lt;pre class=\u0026#34;mermaid language-mermaid\u0026#34;\u0026gt; ... \u0026lt;/pre\u0026gt; graph TD A[Client] --\u003e B[Load Balancer] B --\u003e C[Server1] B --\u003e D[Server2] Using mermaid locally I looked at the Github plugins and Jekyll plugin. However, they don\u0026rsquo;t work in github. So I followed the Mermaid HTML Tutorial.\nDefine a the file mermaid.html in _includes: \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; {% include mermaid.html %}\nin the relevant posts, include it: {% include mermaid.html %}.\nNow mark the diagramm with the element \u0026lt;pre class=\u0026quot;mermaid\u0026quot;\u0026gt;. Unfortunately, normal code blocks translate to \u0026lt;code class=\u0026quot;language-mermaid\u0026quot;\u0026gt;, which is not caught by the mermaid initialize function.\nExample:\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; graph TD A[Client] --\u0026gt; B[Load Balancer] B --\u0026gt; C[Server1] B --\u0026gt; D[Server2] \u0026lt;/pre\u0026gt; Leads to this graph:\ngraph TD A[Client] --\u003e B[Load Balancer] B --\u003e C[Server1] B --\u003e D[Server2] Online Editor There is an online editor which allows you to draw diagrams and then store them and reference them as a picture - the markdown link can be downloaded. The following graph has been generated like this:\nMinimum index.html A minimum Mermaid project looks like this in index.html:\n\u0026lt;html\u0026gt; \u0026lt;body\u0026gt; Here is one mermaid diagram: \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; graph TD A[Client] --\u0026gt; B[Load Balancer] B --\u0026gt; C[Server1] B --\u0026gt; D[Server2] \u0026lt;/pre\u0026gt; And here is another: \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; graph TD A[Client] --\u0026gt;|tcp_123| B B(Load Balancer) B --\u0026gt;|tcp_456| C[Server1] B --\u0026gt;|tcp_456| D[Server2] \u0026lt;/pre\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Plugins There are two plugins:\njekyll-mermaid of 2014 jekyll-mermaid-diagrams of 2019. Unfortunately, both don\u0026rsquo;t work on github.\nMermaid and Hugo It turns out, that mermaid support is a lot easier in the static web site generator Hugo. It is explained in the Hugo hooks documentation.\nYou have to add a layout partial file: layouts/partials/mermaid.html with the following content:\n\u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import mermaid from \u0026#39;https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs\u0026#39;; mermaid.initialize({ startOnLoad: true }); \u0026lt;/script\u0026gt; In addition, this script has to be included in the header themes/XXX/layouts/partials/extend_head.html:\n{{ if or .Params.mermaid .Site.Params.mermaid }} {{ partial \u0026#34;mermaid.html\u0026#34; . }} {{ end }} Next, we extend the code block languages with mermaid in layouts/_default/_markup/render-codeblock-mermaid.html:\n\u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/pre\u0026gt; Now, all you have to do on your page is to define mermaid in the frontmatter:\n--- ... mermaid: true --- and then use a code-block with language mermaid.\nFor example, the code block below:\ngraph TD A[Client] --\u0026gt; B[Load Balancer] B --\u0026gt; C[Server1] B --\u0026gt; D[Server2] will render like this, if it has the language tag mermaid:\ngraph TD A[Client] --\u003e B[Load Balancer] B --\u003e C[Server1] B --\u003e D[Server2] Conclusio Since I use mermaid mainly not to document code, but to end up on Github Pages, I ended up using the \u0026lt;pre class=\u0026quot;mermaid\u0026quot;\u0026gt; approach with Jekyll, as described in above and ignore that it is not displayed on Github.\nFor Hugo, the implementation was much more straight forward.\n","permalink":"http://localhost:1313/post/2023-08-05-mermaid/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://mermaid-js.github.io/mermaid/#/\"\u003eMermaid\u003c/a\u003e is a JavaScript based diagramming and charting tool that renders Markdown-inspired text definitions to create and modify diagrams dynamically.\u003c/p\u003e","title":"Mermaid"},{"content":"I had to practice a long time to understand the go concepts of modules, packages, and how to publish them to github. Here are my learnings.\nModules and packages and files Modules contain one or several packages. A module is basically folder which contains a go.mod file.\nmkdir mymodule cd mymodule go mod init github.com/mmgreiner/mymodule This initializes a module which is called github.com/mmgreiner/mymodule. Note the prefix github.com/mmgreiner: this is later useful when deploying the module to github.\ngo mod init creates the file go.mod, which has the same package name:\nmodule github.com/mmgreiner/mymodule go 1.19 require ( ... ) Executable modules If this module is an executable, this folder must contain a file, typically called main.go, and the following content:\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;log\u0026#34; func DoWhatever() { log.Println(\u0026#34;hallo\u0026#34;) fmt.Println(\u0026#34;hallo\u0026#34;) } func main() { println(\u0026#34;hallo world\u0026#34;) } The package name must be main for an executable module.\nPackages All go files within the same folder must have the same package name. You can create subpackages by creating sub-folders.\nGo files All go files within the same (sub-) folder must have the same package name.\nLibrary modules Library modules do not have a main package, and there may be no go files in the top folder of the module.\nThe relationship between modules, packages and files is well explained in this stack overflow article\nUsing github Just after you create the top folder, it is useful to initialize the local github repository with:\ngit init . If you did forget this step right in the beginning, you can always still perform:\ngit init g git add . After you are completed programming and testing, you commit it locally:\ngit commit -m \u0026quot;initial commit\u0026quot; You would also tag it with a version number. To understand version numbering in go, see module version numbers. Initally, a good number would be v0.0.1 for a development phase, or v1.0.1-alpha for a pre-release version.\nCreate remote repository I usually do this using Github Desktop or creating on github web page. To connect the local repository with the remote repository, use:\ngit remote add origin \u0026quot;https://github.com/mmgreiner/\u0026lt;repository-name\u0026gt;.git\u0026quot; Tag with version number You have to tag it locally, and then push it to the remote repository on github.com:\ngit tag v0.0.1 git push origin v0.0.1 Note: sometimes I messed up the tags and then had to delete them again, since go could not find the module. I followed this instruction How to delete git tags to do this.\nPublishing Very important: don\u0026rsquo;t forget to list it in the go directory\n$ GOPROXY=proxy.golang.org go list -m github.com/mmgreiner/mymodule@v0.0.1 Publishing with homebrew TBD\nSee https://docs.brew.sh/Formula-Cookbook.\nSee https://docs.brew.sh/Adding-Software-to-Homebrew#formulae\nTo create the ruby script for executable apps, use:\nbrew create --go --set-version 0.0.1 https://github.com/mmgreiner/mymodule Open questions How does it work with private git repositories? See here. References This whole process is well explained in this go article.\nLocal development If you prefer not to publish your modules to github, but keep them locally, proceed as follows.\nTO-BE-DONE\n","permalink":"http://localhost:1313/post/2023-07-30-go-modules/","summary":"\u003cp\u003eI had to practice a long time to understand the \u003ca href=\"https://go.dev\"\u003ego\u003c/a\u003e concepts of modules, packages, and how to publish them to \u003ca href=\"https://github.com\"\u003egithub\u003c/a\u003e. Here are my learnings.\u003c/p\u003e","title":"How to work with modules and packages in Go"},{"content":"In this post we investigate how to use Razor pages on the host and Bolero WebAssembly on the client side. The final code can be found on My github - Tutorials - BoleroAppRazor.\nCreate Bolero Razor hosting This is described in more detail in the Bolero hosting documentation. To create such a project, use:\ndotnet new bolero-app --hostpage=razor -o BoleroAppRazor This creates the following files:\n. ├── BoleroAppRazor.sln └── src ├── BoleroAppRazor.Client │ ├── BoleroAppRazor.Client.fsproj │ ├── Main.fs │ ├── Startup.fs │ ├── bin │ └── wwwroot │ ├── css │ │ └── index.css │ ├── favicon.ico │ └── main.html └── BoleroAppRazor.Server ├── BoleroAppRazor.Server.fsproj ├── BookService.fs ├── Pages │ └── _Host.cshtml ├── Startup.fs ├── bin ├── data │ └── books.json The initally served file is _Host.\nUnfortunately, when you try to run this program, it throws the following error:\ndotnet run --project src/*Server info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[62] User profile is available. Using \u0026#39;/Users/mmgreiner/.aspnet/DataProtection-Keys\u0026#39; as key repository; keys will not be encrypted at rest. Hosting environment: Production Content root path: .../src/BoleroAppRazor.Server Now listening on: http://localhost:5000 Application started. Press Ctrl+C to shut down. info: Microsoft.AspNetCore.Hosting.Diagnostics[1] Request starting HTTP/1.1 GET http://localhost:5000/ - - fail: Microsoft.AspNetCore.Server.Kestrel[13] Connection id \u0026#34;0HMPQBS3HOHR9\u0026#34;, Request id \u0026#34;0HMPQBS3HOHR9:00000001\u0026#34;: An unhandled exception was thrown by the application. Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation.CompilationFailedException: One or more compilation failures occurred: /Users/mmgreiner/Projects/Scrap/BoleroAppRazor/src/BoleroAppRazor.Server/Pages/_Host.cshtml(3,21): error CS0234: The type or namespace name \u0026#39;RazorHost\u0026#39; does not exist in the namespace \u0026#39;Bolero.Server\u0026#39; (are you missing an assembly reference?) You have to change @using Bolero.Server.RazorHost to Bolero.Server.\n@page \u0026#34;/\u0026#34; @namespace BoleroAppRazor.Server @using Bolero.Server.RazorHost @inject IBoleroHostConfig BoleroHostConfig \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; ... to\n@page \u0026#34;/\u0026#34; @namespace BoleroAppRazor.Server @using Bolero.Server @inject IBoleroHostConfig BoleroHostConfig \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; ... Now you will get the error:\nHosting environment: Production Now listening on: http://localhost:5000 Application started. Press Ctrl+C to shut down. info: Microsoft.AspNetCore.Hosting.Diagnostics[1] Request starting HTTP/1.1 GET http://localhost:5000/ - - info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0] Executing endpoint \u0026#39;/_Host\u0026#39; info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[103] Route matched with {page = \u0026#34;/_Host\u0026#34;}. Executing page /_Host info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[107] Executing an implicit handler method - ModelState is Valid info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[109] Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult. info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[104] Executed page /_Host in 235.5552ms info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1] Executed endpoint \u0026#39;/_Host\u0026#39; fail: Microsoft.AspNetCore.Server.Kestrel[13] Connection id \u0026#34;0HMPQBUHEQ0DL\u0026#34;, Request id \u0026#34;0HMPQBUHEQ0DL:00000001\u0026#34;: An unhandled exception was thrown by the application. System.MissingMethodException: Method not found: \u0026#39;Elmish.Program`4\u0026lt;!!3,!!4,!!5,!!7\u0026gt; Elmish.ProgramModule.map ..... The simplest way to correct is is to change BoleroAppRazor.Client/Main.fs.\ntype MyApp() = inherit ProgramComponent\u0026lt;Model, Message\u0026gt;() override this.Program = let bookService = this.Remote\u0026lt;BookService\u0026gt;() let update = update bookService Program.mkProgram (fun _ -\u0026gt; initModel, Cmd.ofMsg GetSignedInAs) update view |\u0026gt; Program.withRouter router #if DEBUG |\u0026gt; Program.withHotReload #endif Remove the withHotReload.\nNow everything works fine. The server side looks like this:\ntype Startup() = // This method gets called by the runtime. Use this method to add services to the container. member this.ConfigureServices(services: IServiceCollection) = services.AddMvc().AddRazorRuntimeCompilation() |\u0026gt; ignore services.AddServerSideBlazor() |\u0026gt; ignore services .AddAuthorization() .AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) .AddCookie() .Services .AddBoleroRemoting\u0026lt;BookService\u0026gt;() .AddBoleroHost() #if DEBUG .AddHotReload(templateDir = __SOURCE_DIRECTORY__ + \u0026#34;/../BoleroAppRazor2.Client\u0026#34;) #endif |\u0026gt; ignore // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. member this.Configure(app: IApplicationBuilder, env: IWebHostEnvironment) = if env.IsDevelopment() then app.UseWebAssemblyDebugging() app .UseAuthentication() .UseStaticFiles() .UseRouting() .UseAuthorization() .UseBlazorFrameworkFiles() .UseEndpoints(fun endpoints -\u0026gt; #if DEBUG endpoints.UseHotReload() #endif endpoints.MapBoleroRemoting() |\u0026gt; ignore endpoints.MapBlazorHub() |\u0026gt; ignore endpoints.MapFallbackToPage(\u0026#34;/_Host\u0026#34;) |\u0026gt; ignore) |\u0026gt; ignore module Program = [\u0026lt;EntryPoint\u0026gt;] let main args = WebHost .CreateDefaultBuilder(args) .UseStaticWebAssets() .UseStartup\u0026lt;Startup\u0026gt;() .Build() .Run() 0 Change pages The pages typically consist of a .cshtml file and the corresponding C# file .cshtml.cs. For our purpose, we have to change all these to F#. For instance:\nusing Microsoft.AspNetCore.Mvc; using Microsoft.AspNetCore.Mvc.RazorPages; namespace BoleroAppRazor.Server.Pages; public class IndexModel : PageModel { private readonly ILogger\u0026lt;IndexModel\u0026gt; _logger; public IndexModel(ILogger\u0026lt;IndexModel\u0026gt; logger) { _logger = logger; } public void OnGet() { } } is changed to:\nnamespace BoleroAppRazor.Server.Pages open Microsoft.AspNetCore.Mvc open Microsoft.AspNetCore.Mvc.RazorPages open Microsoft.Extensions.DependencyInjection open Microsoft.Extensions.Logging type IndexModel(_logger: ILogger\u0026lt;IndexModel\u0026gt;) = inherit PageModel() member this.OnGet() = () Don\u0026rsquo;t forget to add them to the project file .fsproj:\n\u0026lt;ItemGroup\u0026gt; \u0026lt;Compile Include=\u0026#34;Pages/Index.cshtml.fs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;Pages/Error.cshtml.fs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;Pages/Privacy.cshtml.fs\u0026#34;/\u0026gt; \u0026lt;Compile Include=\u0026#34;BookService.fs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;Startup.fs\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; Change layout Change the starting page:\n.UseEndpoints(fun endpoints -\u0026gt; #if DEBUG endpoints.UseHotReload() #endif endpoints.MapBoleroRemoting() |\u0026gt; ignore endpoints.MapBlazorHub() |\u0026gt; ignore //endpoints.MapFallbackToPage(\u0026#34;/_Host\u0026#34;) |\u0026gt; ignore endpoints.MapRazorPages() |\u0026gt; ignore // added ) The new _layout.cshtml will only call @RenderBody(). The index page Index.cshtml will be calling the Bolero Client.\n@page @model IndexModel @namespace BoleroAppRazor.Server.Pages @using Bolero.Server @inject IBoleroHostConfig BoleroHostConfig @{ ViewData[\u0026#34;Title\u0026#34;] = \u0026#34;Home page\u0026#34;; } \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;main1\u0026#34;\u0026gt; @(await Html.RenderComponentAsync\u0026lt;BoleroAppRazor.Client.Main.MyApp\u0026gt;(BoleroHostConfig)) \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; @Html.RenderBoleroScript(BoleroHostConfig) Aside: Bulma and navigation On server, wwwroot/js/nav_bulma.js. Taken from Bulma Navbar.\ndocument.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, () =\u0026gt; { // Get all \u0026#34;navbar-burger\u0026#34; elements const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll(\u0026#39;.navbar-burger\u0026#39;), 0); // Add a click event on each of them $navbarBurgers.forEach(el =\u0026gt; { el.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { // Get the target from the \u0026#34;data-target\u0026#34; attribute const target = el.dataset.target; const $target = document.getElementById(target); // Toggle the \u0026#34;is-active\u0026#34; class on both the \u0026#34;navbar-burger\u0026#34; and the \u0026#34;navbar-menu\u0026#34; el.classList.toggle(\u0026#39;is-active\u0026#39;); $target.classList.toggle(\u0026#39;is-active\u0026#39;); }); }); }); ","permalink":"http://localhost:1313/post/2023-04-11-bolero-razor/","summary":"\u003cp\u003eIn this post we investigate how to use Razor pages on the host and \u003ca href=\"https://fsbolero.io\"\u003eBolero\u003c/a\u003e WebAssembly on the client side. The final code can be found on \u003ca href=\"https://github.com/mmgreiner/Tutorials\"\u003eMy github - Tutorials - BoleroAppRazor\u003c/a\u003e.\u003c/p\u003e","title":"Bolero hosting Razor page"},{"content":"Optimization General production structure capacited multi-level lot-sizing model PochetWolsey, page 45\n$1 \\le i \\le m$: set of items to be produced $1 \\le k \\le K$: set of shared resources with limited capacity $1 \\le t \\le n$: time periods until final period n $p_t$: unit production cost $q_t$: fixed production cost $h_t$: unit inventory cost $d_t^i$: demand for item i to be satisified at period t $M_t$: large positive number, expressing an upper bound on the maximum lot size iin period t $L_t^k$: available capacity of resource k during period t $\\alpha^{i k}, \\beta^{i k}$: amount of capacity of resource k consumed $1 \\le j \\le m$: items $D(i)$ set of direct successors of part i in the BOM, i.e. the items consuming some amount of item i when they are produced $r^{i j}$: the amount of item i required to make one unit of item j. r is the dependent demand, and $d_t^i$ is the independent demand $\\gamma^i$: lead-time to produce or deliver an lot of i $x_t^i$: the size of product or purchase order of item i launched in period t, and delivered in period $t + \\gamma^i$. Decision variables: $x_t$: production lot size in period t $y_t$: binary variable indicating wether there is a positive production in period t $s_t$:inventory at the end of period t Objective Function $$ \\begin{aligned} \\text{min} \\sum_i \\sum_t (p_t^i x_t^i + q_t^i y_t^i + h_t^i s_t^i) \\cr \\text{subject to} \\cr s_{t-1}^i + x_{t-\\gamma^i}^i \u0026amp; = [d_t^i + \\sum_{j \\in D(i)} r^{i j} x_t^j] + s_t^i \\cr x_t^i \u0026amp; \\le M_t^i y_t^i \\cr \\sum_i \\alpha^{i k} x_t^i + \\sum_t \\beta^{i k} y_t^i \u0026amp; \\le L_t^k \\cr \\end{aligned} $$\nReferences POCHET, Yves und WOLSEY, Laurence A., 2006. Production planning by mixed integer programming. New York ; Berlin: Springer. Springer series in operations research and financial engineering. ISBN\u0026nbsp;978-0-387-29959-4. MLCM 2006/40914 (T) ","permalink":"http://localhost:1313/post/2023-04-01-production-optimization/","summary":"\u003ch2 id=\"optimization\"\u003eOptimization\u003c/h2\u003e\n\u003cp\u003eGeneral production structure capacited multi-level lot-sizing model \u003ca href=\"https://dl.acm.org/doi/book/10.5555/1202598\"\u003ePochetWolsey\u003c/a\u003e, page 45\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$1 \\le i \\le m$: set of items to be produced\u003c/li\u003e\n\u003cli\u003e$1 \\le k \\le K$: set of shared resources with limited capacity\u003c/li\u003e\n\u003cli\u003e$1 \\le t \\le n$: time periods until final period \u003cem\u003en\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$p_t$: unit production cost\u003c/li\u003e\n\u003cli\u003e$q_t$: fixed production cost\u003c/li\u003e\n\u003cli\u003e$h_t$: unit inventory cost\u003c/li\u003e\n\u003cli\u003e$d_t^i$: demand for item \u003cem\u003ei\u003c/em\u003e to be satisified at period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$M_t$: large positive number, expressing an upper bound on the maximum lot size iin period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$L_t^k$: available capacity of resource k during period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$\\alpha^{i k}, \\beta^{i k}$: amount of capacity of resource \u003cem\u003ek\u003c/em\u003e consumed\u003c/li\u003e\n\u003cli\u003e$1 \\le j \\le m$: items\u003c/li\u003e\n\u003cli\u003e$D(i)$ set of direct successors of part \u003cem\u003ei\u003c/em\u003e in the BOM, i.e. the items consuming some amount of item \u003cem\u003ei\u003c/em\u003e when they are produced\u003c/li\u003e\n\u003cli\u003e$r^{i j}$: the amount of item \u003cem\u003ei\u003c/em\u003e required to make one unit of item \u003cem\u003ej\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cem\u003er\u003c/em\u003e is the dependent demand, and $d_t^i$ is the independent demand\u003c/li\u003e\n\u003cli\u003e$\\gamma^i$: lead-time to produce or deliver an lot of \u003cem\u003ei\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$x_t^i$: the size of product or purchase order of item \u003cem\u003ei\u003c/em\u003e launched in period \u003cem\u003et\u003c/em\u003e, and delivered in period $t + \\gamma^i$.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDecision variables\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003e$x_t$: production lot size in period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$y_t$: binary variable indicating wether there is a positive production in period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e$s_t$:inventory at the end of period \u003cem\u003et\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"objective-function\"\u003eObjective Function\u003c/h3\u003e\n\u003cp\u003e$$\n\\begin{aligned}\n\\text{min} \\sum_i \\sum_t (p_t^i x_t^i + q_t^i y_t^i + h_t^i s_t^i) \\cr\n\\text{subject to} \\cr\ns_{t-1}^i + x_{t-\\gamma^i}^i \u0026amp; = [d_t^i + \\sum_{j \\in D(i)} r^{i j} x_t^j] + s_t^i \\cr\nx_t^i \u0026amp; \\le  M_t^i y_t^i \\cr\n\\sum_i \\alpha^{i k} x_t^i + \\sum_t \\beta^{i k} y_t^i \u0026amp; \\le L_t^k \\cr\n\\end{aligned}\n$$\u003c/p\u003e","title":"General production optimization"},{"content":"This blog contains formulas which can be used to optimize the supply chain with multiple suppliers, and a general production planning formula, taken from the book POCHET, Yves und WOLSEY, Laurence A.: Production planning by mixed integer programming.\nSupply Chain optimization To produce a certain demand your product p at time period t, you need to purchase x products from s suppliers.\nThis is a mixed integer linear optimiziation problem, since we are only dealing with integers and one binary variable.\nThe suppliers For each product froom a supplier, there are:\ninitial investment: the tools and the R\u0026amp;D cost to be able to produce the product at all maybe dependend investments: Some tools build on other tools which the supplier has already invested in. a unit cost for the product a potential ramp-up, since only after the initial investment is done can the supplier slowly start to produce. The demand For each product, there is a demand you have to fulfill in order to be able to manufacture.\nThe goal The goal is to find the best combination of products and suppliers, which fullfills your demands at the minimum possible cost.\nMathematical formulation The field of mathematics handling these kind of questions is called Operation Research. There is some more information also on the related post.\nFirst define the constants:\nt is the time period, often given in months or quarters $d_t^p$ is the demand for product p at time t $q_t^s$ is what supplier s can supply at time t, given that the initial investments have been made $c_s^p$ is the unit cost of product p from supplier s $i_s^p$ is the initial, startup cost for product p from supplier s $j_s^p$ are the dependent startup costs which needed for investment $i_s^p$ The variables are:\n$x_{t,s}^p$ is the variable indicating how many units of product p to purchase from supplier s at time t $y_s^p$ is the decision to make the initial investment. $y \\in {0, 1}$. x is an integer variable, and y in reality is a binary variable which we simulate using an integer variable that can only be 0 or 1.\nThis gives us the following optimization function and constraints:\n$$ \\begin{aligned} \\text{Objective:} \\cr cost := \u0026amp; \\text{Min} \\sum_{t}^{\\text{periods}} \\sum_{p}^{\\text{products}} \\sum_{s}^{\\text{suppliers}} x_{t,s}^p c_s^p + \\sum_{p} \\sum_{s} y_s^p i_s^p \\cr \\cr \\text{Constraints:} \\cr x_{t,s}^p \u0026amp; \\le q_t^s y_s^p \u0026amp; \\text{supply} \\cr \\sum_{p_s} x_{t,s}^p \u0026amp; \\ge d_t^p \u0026amp; \\text{demand} \\cr \\forall_{p_s} i_s^p \u0026amp; \\le j_s^p \u0026amp; \\text{dependent investments} \\end{aligned} $$\nThe objective says: look at each time period. Count how many parts we purchase from each supplier, multiply this with the unit cost of this part, and minimize this cost.\nThen look at investments: if the investment has been made $y = 1$, then take these investment costs and add them also while minimizing.\nThe first constraint says that the number of products supplied from supplier s must be no more than what this supplier can deliver in this time period, given that the initial investments have been made. I took the trick with the binary variable y from Mosek. A supply is only given when this variable moves to 1.\nThe second constraint ensures that the products supplied from all combined suppliers at a given time period must at least fulfill the demand for that time period.\nThe third constraint ensures that if investment $i_s^p$ is made, then also investment $j_s^p$ has been made.\nProduction planning General production structure capacited multi-level lot-sizing model PochetWolsey, page 45. All the formulas below taken from PochetWolsey.\nConstants $1 \\le i \\le m$: set of items to be produced $1 \\le k \\le K$: set of shared resources with limited capacity $1 \\le t \\le n$: time periods until final period n $p_t$: unit production cost $q_t$: fixed production cost $h_t$: unit inventory cost $d_t^i$: demand for item i to be satisified at period t $M_t$: large positive number, expressing an upper bound on the maximum lot size in period t $L_t^k$: available capacity of resource k during period t $\\alpha^{i k}, \\beta^{i k}$: amount of capacity of resource k consumed $1 \\le j \\le m$: items $D(i)$ set of direct successors of part i in the BOM, i.e. the items consuming some amount of item i when they are produced $r^{i j}$: the amount of item i required to make one unit of item j. r is the dependent demand, and $d_t^i$ is the independent demand $\\gamma^i$: lead-time to produce or deliver an lot of i $x_t^i$: the size of product or purchase order of item i launched in period t, and delivered in period $t + \\gamma^i$. Decision variables $x_t$: production lot size in period t $y_t$: binary variable indicating whether there is a positive production in period t $s_t$: inventory at the end of period t Objective Function $$ \\begin{aligned} \\text{min} \\sum_i \\sum_t (p_t^i x_t^i + q_t^i y_t^i + h_t^i s_t^i) \\\\ \\text{subject to} \\\\ s_{t-1}^i + x_{t-\\gamma^i}^i \u0026 = [d_t^i + \\sum_{j \\in D(i)} r^{i j} x_t^j] + s_t^i \\\\ x_t^i \u0026 \\le M_t^i y_t^i \\\\ \\sum_i \\alpha^{i k} x_t^i + \\sum_t \\beta^{i k} y_t^i \u0026 \\le L_t^k \\\\ \\end{aligned} $$ References Mosek: Modeling Cookbook\nPOCHET, Yves und WOLSEY, Laurence A., 2006. Production planning by mixed integer programming. New York ; Berlin: Springer. Springer series in operations research and financial engineering. ISBN\u0026nbsp;978-0-387-29959-4. MLCM 2006/40914 (T) ","permalink":"http://localhost:1313/post/2023-03-26-mixed-integer-linear-optimization/","summary":"\u003cp\u003eThis blog contains formulas which can be used to optimize the supply chain with multiple suppliers, and a general production planning formula, taken from the book \u003ca href=\"https://dl.acm.org/doi/book/10.5555/1202598\"\u003ePOCHET, Yves und WOLSEY, Laurence A.: \u003cem\u003eProduction planning by mixed integer programming\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e","title":"Mixed integer linear optimiziation for supply chain and production"},{"content":"This is a list of reminders and open questions I still wanted to look at in more detail.\nCSV conversion Next to FSharp.Data there is CSVHelper. However, it does not support FSharp types intrinsically. A stackoverflow article describes the details.\nI have concluded that to read CSV files, FSharp.Data is the best. To easily write CSV files, use CSVHelper.\nThe configuration is set like this:\nuse csvStream = new IO.StreamWriter(\u0026#34;woCancelled.csv\u0026#34;) let culture = System.Globalization.CultureInfo.InvariantCulture let config = new CsvHelper.Configuration.CsvConfiguration(culture) config.Delimiter \u0026lt;- \u0026#34;;\u0026#34; use csvWriter = new CsvHelper.CsvWriter(csvStream, config) csvWriter.WriteRecords(data) Stress tests of CSV There are several stress tests for CSV reading and writing:\nhttps://github.com/maxogden/csv-spectrum https://github.com/wireservice/csvkit/tree/master/examples https://discourse.julialang.org/t/csv-reader-benchmarks-julia-reads-csvs-10-20x-faster-than-python-and-r/41974 https://data.world/datasets/csv Writing scientific papers see https://jaantollander.com/post/scientific-writing-with-markdown/\nSee with more detail: https://programminghistorian.org/en/lessons/sustainable-authorship-in-plain-text-using-pandoc-and-markdown\nPrint Markdown with pandoc pandoc is a tool to convert markdown to all kinds of formats. It states:\nIf you need to convert files from one markup format into another, pandoc is your swiss-army knife.\nYou can use the yaml header in a markdown file to tell pandoc how to print it. For instance:\n--- title: My Title author: Markus Greiner date: 2024-01-18 fontsize: 12pt papersize: a4 geometry: margin=2cm --- This will use paper size A4 and font 12pt when converting to pandoc, and will set the margin to 2 cm. If you want to print it landscape, do:\n--- geometry: landscape --- The conversion to pdf is done as follows:\n% pandoc *.md -o mydoc.pdf Humanizer Humanizer meets all your .NET needs for manipulating and displaying strings, enums, dates, times, timespans, numbers and quantities. It is part of the .NET Foundation, and operates under their code of conduct.\nHumanizer is an amazing library to do string conversions from programming strings to human readable strings. For instance, it handles all the PascalCase, camelCase, etc renaming, shortening of strings, even creating [Display(\u0026quot;Family Name\u0026quot;)] attribute handling.\nYaml Use YamlDotNet.\nMarkdown Use Markdig.\n## datatools\ndatatools is a rich collection of command line programs targetting data conversion, cleanup and analysis directly from your favorite POSIX shell. It has proven useful for data collaberations where individual members of a project may prefer different toolsets in their analysis (e.g. Julia, R, Python) but want to work from a common baseline. It also has been used intensively for internal reporting from various Caltech Library metadata sources.\nMVC, Razor, Razor Pages, MVC, and Blazor I found a good article explaining all of this on Progress Telerik\nUnix stuff To only grep on stderr, do:\ngo run . 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null | grep MyPattern ","permalink":"http://localhost:1313/post/2023-03-18-miscellaneous/","summary":"\u003cp\u003eThis is a list of reminders and open questions I still wanted to look at in more detail.\u003c/p\u003e\n\u003ch2 id=\"csv-conversion\"\u003eCSV conversion\u003c/h2\u003e\n\u003cp\u003eNext to \u003ca href=\"https://fsprojects.github.io/FSharp.Data/\"\u003eFSharp.Data\u003c/a\u003e there is \u003ca href=\"https://joshclose.github.io/CsvHelper/\"\u003eCSVHelper\u003c/a\u003e. However, it does not support FSharp types intrinsically. A \u003ca href=\"https://stackoverflow.com/questions/66401283/how-do-you-use-csvhelper-csvwriter-with-f-option-types\"\u003estackoverflow\u003c/a\u003e article describes the details.\u003c/p\u003e","title":"Miscellaneous"},{"content":"This contains some thoughts how to implement RESTful APIs.\nBackground tbd\nBest practices A search for RESTful API best practices reveals many sites:\nMicrosoft Guidelines are extremely useful and handle tricky stuff like date formats. REST API Tutorial Stackoverflow is a good overview of best practices. Swagger Hevodata good overview, but pushing own tool Resources Use plural nouns to describe resources\nVerbs Taken from Hevodata and Microsoft Guidelines\nREST Verb Action Is Idempotent GET fetch one or more values from the resource true POST create a new resource (or set of resources) false PUT replace an existing object entirely or created a new one, if ID does not exist true DELETE delete an existing object true these are used less frequently PATCH modify a field of an existing resource false OPTION get information about a request true The first four verbs (GET, POST, PUT, DELETE) respond to the the CRUD operation of persistent storage.\nQuestions:\nPUT - how should it behave if the ID does not exist? POST - does it create the ID? POST Return 201 Created and should return the created location\nGET tbd\nPATCH tbd\nMinimal API Minimal APIs are a simplified approach for building fast HTTP APIs with ASP.NET Core. You can build fully functioning REST endpoints with minimal code and configuration. Skip traditional scaffolding and avoid unnecessary controllers by fluently declaring API routes and actions.\nFor now, we show how to implement a file upload in F# (see also Minimal API F# for more examples).\nTo create a Minimal API program, use:\n% dotnet new web --lang f# -o TodoApi This is the whole program:\n[\u0026lt;EntryPoint\u0026gt;] let main args = let builder = WebApplication.CreateBuilder(args) let app = builder.Build() app.MapPost(\u0026#34;/upload\u0026#34;, Func\u0026lt;IFormFile, Task\u0026lt;IResult\u0026gt;\u0026gt;(fun file -\u0026gt; task { let tempFile = IO.Path.Join(IO.Path.GetTempPath(), file.FileName) app.Logger.LogInformation(\u0026#34;tempFile\u0026#34;, tempFile, \u0026#34;filename\u0026#34;, file.FileName) use stream = IO.File.OpenWrite(tempFile) file.CopyTo(stream) stream.Close() return Results.Ok(\u0026#34;uploaded \u0026#34; + file.FileName) })) |\u0026gt; ignore app.Run() 0 // Exit code It reads the posted file and copies the file to a local temporary file. A little text message is displayed in the browser. In a real example, you would parse the stream and do something useful with it.\nThe corresponding HMTL looks like this:\n\u0026lt;form method=\u0026#34;post\u0026#34; action=\u0026#34;/upload\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Upload file: \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34;/\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Upload the file\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; The code looks much simpler than the corresponding MVC controller. It can also be tested using CURL:\n% curl --form file='@filename' http://localhost:PORT/upload Minimal API and HTML content Minimal API is aimed at RESTful APIs, not necessarily at HTML pages. To return a HTML page, use:\napp.MapGet(\u0026#34;/\u0026#34;, Func\u0026lt;Task\u0026lt;IResult\u0026gt;\u0026gt;(fun () -\u0026gt; task { let page = IO.File.ReadAllText(\u0026#34;index.html\u0026#34;) return Results.Content(page, contentType = \u0026#34;text/html\u0026#34;) })) |\u0026gt; ignore This example can also be found in my github.\nMiscellaneous Simple bulma index.html Often I look for the simplest index.html possible. I use this one with bulma CSS framework:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;De finibus bonorum et malorum\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; References Fielding, Roy Thomas (2000). \u0026ldquo;Chapter 5: Representational State Transfer (REST)\u0026rdquo;. Architectural Styles and the Design of Network-based Software Architectures (Ph.D.). University of California, Irvine.\n","permalink":"http://localhost:1313/post/2023-03-15-RESTApi/","summary":"\u003cp\u003eThis contains some thoughts how to implement RESTful APIs.\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003etbd\u003c/p\u003e\n\u003ch2 id=\"best-practices\"\u003eBest practices\u003c/h2\u003e\n\u003cp\u003eA search for RESTful API best practices reveals many sites:\u003c/p\u003e","title":"RESTful API"},{"content":"Some of my codes are documented on my Github with description in the readme files. Take a look there.\nGithub Description BoleroApp A simple Bolero app with file upload and data repository using dependency injection StringAlgorithms Some string algorithms in F# to measure string similarity WebAPI A net7.0 based RestAPI in F# DependencyInjection simple attempts at dependency injection in F# MinimalAPI Minimal API with a file upload example BoleroAppRazor Bolero App, but using Razor pages on the server ","permalink":"http://localhost:1313/post/2023-02-10-github-fsharp/","summary":"\u003cp\u003eSome of my codes are documented on my \u003ca href=\"https://github.com/mmgreiner\"\u003eGithub\u003c/a\u003e with description in the readme files. Take a look there.\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eGithub\u003c/th\u003e\n          \u003cth\u003eDescription\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/BoleroApp\"\u003eBoleroApp\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eA simple \u003ca href=\"https://fsbolero.io\"\u003eBolero\u003c/a\u003e app with file upload and data repository using dependency injection\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/StringAlgorithms\"\u003eStringAlgorithms\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eSome string algorithms in \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e to measure string similarity\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/WebAPI\"\u003eWebAPI\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eA net7.0 based RestAPI in \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/dependencyInjection\"\u003eDependencyInjection\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003esimple attempts at dependency injection in \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/Tutorials/tree/master/MinimalApiPost\"\u003eMinimalAPI\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003eMinimal API with a file upload example\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003ca href=\"https://github.com/mmgreiner/Tutorials/tree/master/BoleroAppRazor\"\u003eBoleroAppRazor\u003c/a\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003ca href=\"https://fsbolero.io\"\u003eBolero\u003c/a\u003e App, but using Razor pages on the server\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"Github resources"},{"content":"In 2023, I became interested in the programming language Go. It is a C derivates without all the nil pointer exceptions, and has a very solid infrastructure and libraries to compile across different operating systems.\nNevertheless, it has some quirks which I would like to keep here as a fast reference and cheat sheet.\nDate formats This is my opinion is the worse design decision they have taken. Formatting times and dates is not done using letters, but numbers.\nA good summary is given in Go Samples, here as a quick sheet:\n01 - month 02 - day 03 - hour (12h) 04 - minute 05 - second 06 - year 07 - time zone offset January - month as long text Jan - month as short text Monday - weekday as long text Mon - weekday as short text Some standard layouts are useful (taken from Go Samples)\nconst ( // YYYY-MM-DD: 2022-03-23 YYYYMMDD = \u0026#34;2006-01-02\u0026#34; // 24h hh:mm:ss: 14:23:20 HHMMSS24h = \u0026#34;15:04:05\u0026#34; // 12h hh:mm:ss: 2:23:20 PM HHMMSS12h = \u0026#34;3:04:05 PM\u0026#34; // text date: March 23, 2022 TextDate = \u0026#34;January 2, 2006\u0026#34; // text date with weekday: Wednesday, March 23, 2022 TextDateWithWeekday = \u0026#34;Monday, January 2, 2006\u0026#34; // abbreviated text date: Mar 23 Wed AbbrTextDate = \u0026#34;Jan 2 Mon\u0026#34; ) Enum types Go does not support enum types, but they can be simulated. Again, take a look at Gosamples enum for a good overview.\ntype Season int const ( Spring Season = iota + 1 Summer Autumn Winter ) The iota indicator (I have no clue where this word is coming from) just numbers the constant values 1, 2, 3, \u0026hellip;\nNote that when such an enum is marshalled, you have to provide custom marshaller and demarshaller.\nGenerics Generics are parameterized types in Go. Some background can be found in the tutorial.\nEmbedding Files can be embedded in the generated binary. See \u0026lt;\u0026gt;.\nimport embed //go:embed: myfiles res embed.FS If you use file embedding with templates, proceed as follows to embed files in the sub-folder templates:\nimport ( \u0026#34;embed\u0026#34; \u0026#34;html/templates\u0026#34; \u0026#34;github.com/gin-gonic/gin\u0026#34; ) var ( //go:embed templates/* templFolder embed.FS tmplFiles = template.Must(template.ParseFS(templFolder, \u0026#34;templates/index.html\u0026#34;, \u0026#34;templates/jobinfo.html\u0026#34;, \u0026#34;templates/jobinfo.md\u0026#34;)) ) func main() { router := gin.Default() router.SetHTMLTemplate(tmplFiles) router.GET(\u0026#34;/index\u0026#34;, func (c *gin.Context) { c.HTML(http.StatusOK, \u0026#34;index.html\u0026#34;, gin.H{ \u0026#34;title\u0026#34;: \u0026#34;My title\u0026#34;, }) router.Run() } Code generation Code can be generated during a go build. See Go generate.\n//go:generate goyacc -o gopher.go -p parser gopher.y Swagger Swagger is a standardized way to document REST APIs. In Go is is supported by swaggo/swag. A good documentation and example can be found at LogRocket.\nswaggo/swag supports either generating Go code from swagger specifications, or annotating Go code with special documentation tags and generate the Swagger interface from the code.\nFunctional language Go is not a functional language. Some attempts have been made to bring in some functional concepts into it:\nGithub rp-go: I found this one promising and well explained Functional Programming with Go-Lang: https://pkg.go.dev/github.com/BooleanCat/go-functional Various https://marketplace.visualstudio.com/items?itemName=golang.Go\nHow to bring it to IIS: https://labod.co/posts/running_a_go_project_with_iis\nArticle on AI word embeddings: https://cybernetist.com/2024/01/07/fun-with-embeddings/, using gocolly for web scraping and go-echarts for visualization.\n","permalink":"http://localhost:1313/post/2023-02-01-golang/","summary":"\u003cp\u003eIn 2023, I became interested in the programming language \u003ca href=\"https://go.dev\"\u003eGo\u003c/a\u003e. It is a C derivates without all the nil pointer exceptions, and has a very solid infrastructure and libraries to compile across different operating systems.\u003c/p\u003e","title":"Go tricks \u0026 tips"},{"content":"SWIG SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages. SWIG is used with different types of target languages including common scripting languages such as Javascript, Perl, PHP, Python, Tcl and Ruby.\n% swig -go example.i % gcc -fpic -c example.c example_wrap.c -I /usr/local/include % gcc -shared example.o example_wrap.o -o example.so SWIG and Go How to interface SWIG and Go is explained in the SWIG documentation. Go usually interfaces to C using cgo, but cannot easily interface to C++. This is where SWIG can help. For more information, see the documentation.\n","permalink":"http://localhost:1313/post/2023-01-13-swig-c-interfacer/","summary":"\u003ch2 id=\"swig\"\u003eSWIG\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://swig.org/index.html\"\u003eSWIG\u003c/a\u003e is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages. SWIG is used with different types of target languages including common scripting languages such as Javascript, Perl, PHP, Python, Tcl and Ruby.\u003c/p\u003e","title":"SWIG - interface for C and C++"},{"content":"Operation Research is defined in Wikipedia as\nOperations research (British English: operational research) \u0026hellip; , often shortened to the initialism OR, is a discipline that deals with the development and application of analytical methods to improve decision-making. It is considered to be a subfield of mathematical sciences.\nTypical problems of OR are:\nproduction or assembly optimization routing optimization scheduling optimal packaging I have found two good online lecture notes: Introduction to Operation Research by Juraj Stacho and Operation and Operations Resarch by Matthew Roughan.\nIn this post, I want to show some examples of OR problems and how they can be solved using either OR-Tools and dotnet or xx and Julia.\nLinear optimization example All OR problems consist of three components:\ndecision variables: they define the values that have to be decided upon goal or objective: the quanitity that needs to be minimized or maximized objective function: expression how to compute the goal constraints: equalities or inequalities describing restrictions. Our example is taken from OR-Tools:\n$$ \\begin{align} obj: \\text{maximize } 3x + y \\text{ subject to:} \\cr c_0: x + y \u0026amp; \\le 2 \\cr d_0: 0 \\le x \u0026amp; \\le 1 \\cr d_1: 0 \\le y \u0026amp; \\le 2 \\cr \\end{align} $$\nEquation 1 In this case, there are two variables x and y, both with defined lower and upper boundaries given in $ d_0 $ and $ d_1 $.\nThere is one contraint $ c_0 $, with coefficients 1.0 for x and 1.0 for y.\nThe objective function obj has two variables x and y, with coefficients 3.0 and 1.0.\nGoogle OR-Tools OR-Tools \u0026ldquo;is open source software for combinatorial optimization, which seeks to find the best solution to a problem out of a very large set of possible solutions.\u0026rdquo; Installation is very easy using dotnet, see OR-Tools installation. Using dotnet it is as easy as: dotnet add package Google.OrTools.\nOR-Tools can be used for many kinds of OR problems. One category is to find any feasible solution (see example xy below), another category is to find an optimal solution, typically trying to minimize or maximize some cost or values.\nLinear optimization or linear programming (LP) lare supported with two algorithms, one from Google (called GLOP) and one for integer only variables and constraints, called SCIP. See here for more information.\nOR-Tools and Dotnet OR-Tools have support for C++, Python, Java, and C#. F# is not supported out of the box. There used to be a wrapper Google.OrTools.FSharp which is still available on nuget, but the documentation is no longer available.\nParticularly for expressing equations directly in the code, C# is much handier with its implicit type conversion.\nCompare these two pieces of code to demonstrate this, taken from OR-Tools MIP Example:\nMaximize $x + 10y$ subject to:\n$$ \\begin{align} x \u0026amp;+ 7y \u0026amp; \\le 17.5 \\cr x \u0026amp; \u0026amp; \\le 3.5 \\cr \u0026amp;x \u0026amp;\\ge 0 \\cr \u0026amp;y \u0026amp;\\ge 0 \\end{align} $$\nEquation 2 C# OR-Tools uses C# as the targeted dotnet programming language. C# with its automatic type conversion lends itself nicely to express algebraic equations.\nusing Google.OrTools; var solver = LinearSolver.Solver.CreateSolver(\u0026#34;SCIP\u0026#34;); var x = solver.MakeIntVar(0.0, double.PositiveInfinity, \u0026#34;x\u0026#34;); var y = solver.MakeIntVar(0.0, double.PositiveInfinity, \u0026#34;y\u0026#34;); solver.Add(x + 7*y \u0026lt;= 17.5); solver.Add(x \u0026lt;= 3.5); solver.Maximize(x + 10 * y); solver.Solve(); F# #r \u0026#34;nuget: Google.OrTools\u0026#34; open Google.OrTools let solver = LinearSolver.Solver.CreateSolver(\u0026#34;SCIP\u0026#34;) let x = solver.MakeIntVar(0.0, Double.PositiveInfinity, \u0026#34;x\u0026#34;) let y = solver.MakeIntVar(0.0, Double.PositiveInfinity, \u0026#34;y\u0026#34;) let c1 = solver.MakeConstraint(0.0, 17.5, \u0026#34;c1\u0026#34;) c1.SetCoefficient(x, 1.0) c1.SetCoefficient(y, 7.0) let c2 = solver.MakeConstraint(0.0, Double.PositiveInfinity, \u0026#34;c2\u0026#34;) c2.SetCoefficient(x, 1.0) solver.Maximize(x + 10.0 * y) solver.Solve() There is one way to make F# look somewhat nicer, as shown on StackOverflow. You have to explicitly declare the operators for the LinearExpr.\nmodule LinearExprOperators = let ( ^\u0026lt;\u0026gt; ) (x: LinearExpr) (y: LinearExpr) = LinearExpr.(\u0026lt;\u0026gt;) (x, y) let ( ^= ) (x: LinearExpr) (y: LinearExpr) = LinearExpr.(=) (x, y) let (^\u0026lt;=) (x: LinearExpr) (y: LinearExpr) = LinearExpr.(\u0026lt;=) (x, y) let (^\u0026lt;==) (x: LinearExpr) (y: float) = LinearExpr.(\u0026lt;=) (x, y) open LinearExprOperators olver.Add(x + 7.0 * y ^\u0026lt;== 17.5) However, this seems to be very cumbersome. In this case, the functional programming style does not lead itself to be more concise.\nLonger example Back to the equation 1 of above:\nmaximize $$ 3x + y $$ subject to:\n$$ \\begin{align} x + y \u0026amp; \\le 2 \\cr 0 \\le x \u0026amp; \\le 1 \\cr 0 \\le y \u0026amp; \\le 2 \\cr \\end{align} $$\nIn F#, the variables x and y are defined with the lower and upper bounds of 1 and 2 respectively. We are looking for for integer solutions, therefore we will be using the SCIP linear solver.\nThe objective function obj is defined with the two coefficients for $ 3x $ and $ 1y $.\n#r \u0026#34;nuget: Google.OrTools\u0026#34; open Google.OrTools.LinearSolver let solver = Solver.CreateSolver(\u0026#34;SCIP\u0026#34;) assert not (isNull solver) // create variables x and y let x = solver.MakeIntVar(0.0, 1.0, \u0026#34;x\u0026#34;) let y = solver.MakeIntVar(0.0, 2.0, \u0026#34;y\u0026#34;) // create constraint let c1 = solver.MakeConstraint(0.0, 2.0, \u0026#34;c1\u0026#34;) c1.SetCoefficient(x, 1.0) c1.SetCoefficient(y, 1.0) solver.Maximize(3.0 * x + y) let res = solver.Solve() printfn \u0026#34;%A\u0026#34; res // OPTIMAL printfn \u0026#34;objective value: %f\u0026#34; (solver.Objective().Value()) // objective value: 4.000000 printfn \u0026#34;x = %f\u0026#34; (x.SolutionValue()) // x = 1.000000 printfn \u0026#34;y = %f\u0026#34; (y.SolutionValue()) // y = 1.000000 The objective function could also be implemented using an explicit objective with coefficients:\nlet objective = solver.Objective() objective.SetCoefficient(x, 3.0) objective.SetCoefficient(y, 1.0) objective.SetMaximization() ### Another Example\nLet\u0026rsquo;s take another example with only integers as variables and using arrays, taken also from OR-Tools Arrays. We will also use F# 2-dimensional arrays here. These are described in F# arrays.\nThis is the optimization:\n$$ \\begin{align} \\text{Maximize } 7x_1 + 8x_2 + 2x_3 + 9x_4 + 6x_5 \\text{ subject to} \\cr 5x_1\t+\t7x_2\t+\t9x_3\t+\t2x_4\t+\t1x_5 \u0026amp; \\le\t250 \\cr 18x_1\t+\t4x_2\t-\t9x_3\t+\t10x_4\t+\t12x_5 \u0026amp; \\le 285 \\cr 4x_1\t+\t7x_2\t+\t3x_3\t+\t8x_4\t+\t5x_5 \u0026amp; \\le 211 \\cr 5x_1\t+\t13x_2\t+\t16x_3\t+\t3x_4\t-\t7x_5 \u0026amp; \\le 315 \\cr x_i \\text{ are positive integers} \\end{align} $$\nIn the F# example, whe will represent the equations as a list of list, such that fst represents the coefficients, and snd the boundaries. We also define Inf as an abbreviations. This most easily resembles the layout of the constraints. The coefficients itself will be stored in a 2-dimensional array.\nopen Microsoft.FSharp.Collections let Inf = Double.PositiveInfinity let constraints = [ [5; 7; 9; 2; 1], 250 [18; 4; 9; 10; 12], 285 [4; 7; 3; 8; 5], 211 [5; 13; 16; 3; 7], 315 ] let coefficients = constraints |\u0026gt; List.map fst |\u0026gt; array2D let bounds = constraints |\u0026gt; List.map snd The rest ist straight forward. We declare solver, then create as many variables called x{i+1}, for $ x_1 $ through $ x_5 $, as there are coefficients in the first constraint.\nThen we create all the constraints, as many as the 2-d array has rows (coefficients.GetLength(0)). For each constraint i, we create all the coefficients j, associated with the variable j. The constraint is given at coefficients.[i,j].\nFinally, we declare the objective maximization function. To check if everything went fine, we can use the function solver.ExportModelAsLpFormat(false), which gives a nice print-out of the internal data.\nlet solver = LinearSolver.Solver.CreateSolver(\u0026#34;SCIP\u0026#34;) // make variables let vars = fst constraints.[0] |\u0026gt; List.mapi (fun i _ -\u0026gt; solver.MakeIntVar(0.0, Inf, $\u0026#34;x{i+1}\u0026#34;) ) // make constraints for i in 0..coefficients.GetLength(0)-1 do let con = solver.MakeConstraint(0.0, bounds.[i], $\u0026#34;c_{i}\u0026#34;) for j in 0..coefficients.GetLength(1)-1 do con.SetCoefficient(vars.[j], coefficients.[i, j]) solver.Maximize(7.0 * vars.[0] + 8.0 * vars.[1] + 2.0 * vars.[2] + 9.0 * vars.[3] + 6.0 * vars.[4]) solver.ExportModelAsLpFormat(false) |\u0026gt; printfn \u0026#34;%s\u0026#34; This should give a listing as follows:\n% dotnet run \\ Generated by MPModelProtoExporter \\ Name : \\ Format : Free \\ Constraints : 4 \\ Variables : 5 \\ Binary : 0 \\ Integer : 5 \\ Continuous : 0 Maximize Obj: +7 x1 +8 x2 +2 x3 +9 x4 +6 x5 Subject to c_0_rhs: +5 x1 +7 x2 +9 x3 +2 x4 +1 x5 \u0026lt;= 250 c_0_lhs: +5 x1 +7 x2 +9 x3 +2 x4 +1 x5 \u0026gt;= 0 c_1_rhs: +18 x1 +4 x2 +9 x3 +10 x4 +12 x5 \u0026lt;= 285 c_1_lhs: +18 x1 +4 x2 +9 x3 +10 x4 +12 x5 \u0026gt;= 0 c_2_rhs: +4 x1 +7 x2 +3 x3 +8 x4 +5 x5 \u0026lt;= 211 c_2_lhs: +4 x1 +7 x2 +3 x3 +8 x4 +5 x5 \u0026gt;= 0 c_3_rhs: +5 x1 +13 x2 +16 x3 +3 x4 +7 x5 \u0026lt;= 315 c_3_lhs: +5 x1 +13 x2 +16 x3 +3 x4 +7 x5 \u0026gt;= 0 Bounds 0 \u0026lt;= x1 \u0026lt;= inf 0 \u0026lt;= x2 \u0026lt;= inf 0 \u0026lt;= x3 \u0026lt;= inf 0 \u0026lt;= x4 \u0026lt;= inf 0 \u0026lt;= x5 \u0026lt;= inf Generals x1 x2 x3 x4 x5 End Now we just need so solve it:\nmatch solver.Solve() with | LinearSolver.Solver.ResultStatus.OPTIMAL -\u0026gt; printfn \u0026#34;solution = %f\u0026#34; (solver.Objective().Value()) for v in vars do printfn \u0026#34;%s = %f\u0026#34; (v.Name()) (v.SolutionValue()) | x -\u0026gt; printfn \u0026#34;no optimal solution, %A\u0026#34; x which gives us:\nsolution = 259.000000 x1 = 8.000000 x2 = 19.000000 x3 = 0.000000 x4 = 5.000000 x5 = 1.000000 Toy Company Let\u0026rsquo;st start with a simple example out of Stacho 1:\nA toy company makes two types of toys: toy soldiers and trains. Each toy is produced in two stages, first it is constructed in a carpentry shop, and then it is sent to a finishing shop, where it is varnished, vaxed, and polished. To make one toy soldier costs €10 for raw materials and €14 for labor; it takes 1 hour in the carpentry shop, and 2 hours for finishing. To make one train costs €9 for raw materials and €10 for labor; it takes 1 hour in the carpentry shop, and 1 hour for finishing.\nThere are 80 hours available each week in the carpentry shop, and 100 hours for finishing. Each toy soldier is sold for €27 while each train for €21. Due to decreased demand for toy soldiers, the company plans to make and sell at most 40 toy soldiers; the number of trains is not restriced in any way.\nWhat is the optimum (best) product mix (i.e., what quantities of which products to make) that maximizes the profit (assuming all toys produced will be sold)?\nOur variables are trains and soldiers, both being integers. What is the objective function? We want to maximize the profit, so what are the costs. The manufacturing costs are:\ntoy soldier: €27 sales price - €10 for raw material + €14 for labor = €3 profit trains: €21 sales price - €9 raw material - €10 labor = €2 profit Therefore, our objective function is: $ \\text{maximize } 3 * soldiers + 2 * trains $.\nWhat are our constraints?\ncarpentry shop: $ soldiers * 1h + trains * 1h $, with 80 hours available finishing shop: $ soldiers * 2h + trains * 1h $, with 100 hours available Therefore, the set of equations is:\n$$ \\begin{align} \\text{max } 3 soldiers + 2 trains \\text{ subject to:} \\cr soldiers + trains \\le 80 \\cr 2 soldiers + trains \\le 100 \\cr soldiers \\le 40 \\cr soldiers, trains \\ge 0 \\end{align} $$\nIn F#, this could be implemented like this:\nlet solver = Solver.CreateSolver(\u0026#34;SCIP\u0026#34;) let constraints = [ [ 1; 1 ], 80 [ 2; 1 ], 100 [ 1; 0 ], 40 ] let vars = [ \u0026#34;soldiers\u0026#34;; \u0026#34;trains\u0026#34; ] |\u0026gt; List.map(fun v -\u0026gt; solver.MakeIntVar(0.0, 1000.0, v)) let coefficients = constraints |\u0026gt; List.map fst |\u0026gt; array2D let bounds = constraints |\u0026gt; List.map snd // make constraints for i in 0..coefficients.GetLength(0)-1 do let con = solver.MakeConstraint(0.0, bounds.[i]) for j in 0..coefficients.GetLength(1)-1 do con.SetCoefficient(vars.[j], coefficients.[i, j]) solver.Maximize(3.0 * soldiers + 2.0 * trains) solver.ExportModelAsLpFormat(false) |\u0026gt; printfn \u0026#34;%s\u0026#34; // solve it match solver.Solve() with | OPTIMAL -\u0026gt; printfn $\u0026#34;Optimal revenue = ${solver.Objective().Value()}\u0026#34; for v in vars do printfn $\u0026#34;{v.Name()} = {v.SolutionValue()}\u0026#34; | x -\u0026gt; printfn \u0026#34;no solution found, %A\u0026#34; x This will result in:\nOptimal revenue = $180 soldiers = 20 trains = 60 Map coloring problem The map coloring problem is an example taken from the MiniZinc tutorial. The states of Australia have to be colored with maximum 3 colors, such that no adjacent states have the same color.\nNow in this case, we don\u0026rsquo;t have an objective function, we just need any feasible solution. We will therefore use the constrained programming solver, not the linear equation solvers. A variable is created for the color of each state. The constraints are such that neighboring states cannot have the same color.\nAn implementation in F#:\nopen Google.OrTools.FSharp.Sat let model = new CpModel() let nofColors = 3L let wa = model.NewIntVar(1L, nofColors, \u0026#34;wa\u0026#34;) let nt = model.NewIntVar(1L, nofColors, \u0026#34;nt\u0026#34;) let sa = model.NewIntVar(1L, nofColors, \u0026#34;sa\u0026#34;) let q = model.NewIntVar(1L, nofColors, \u0026#34;q\u0026#34;) let nsw = model.NewIntVar(1L, nofColors, \u0026#34;nsw\u0026#34;) let v = model.NewIntVar(1L, nofColors, \u0026#34;v\u0026#34;) let t = model.NewIntVar(1L, nofColors, \u0026#34;t\u0026#34;) // constraints model.Add(wa ^\u0026lt;\u0026gt; nt) |\u0026gt; ignore model.Add(wa ^\u0026lt;\u0026gt; sa) |\u0026gt; ignore model.Add(nt ^\u0026lt;\u0026gt; sa) |\u0026gt; ignore model.Add(nt ^\u0026lt;\u0026gt; q) |\u0026gt; ignore model.Add(sa ^\u0026lt;\u0026gt; q) |\u0026gt; ignore model.Add(sa ^\u0026lt;\u0026gt; nsw) |\u0026gt; ignore model.Add(sa ^\u0026lt;\u0026gt; v) |\u0026gt; ignore model.Add(q ^\u0026lt;\u0026gt; nsw) |\u0026gt; ignore model.Add(nsw ^\u0026lt;\u0026gt; v) |\u0026gt; ignore let solver = new CpSolver() let status = solver.Solve(model) match status with | CpSolverStatus.Optimal | CpSolverStatus.Feasible -\u0026gt; let vv x = solver.Value(x) |\u0026gt; int printfn \u0026#34;wa = %i, nt = %i, sa = %i, q = %i, nsw = %i, v = %i, t = %i\u0026#34; (vv wa) (vv nt) (vv sa) (vv q) (vv nsw) (vv v) (vv t) | _ -\u0026gt; printfn \u0026#34;no solution found\u0026#34; // wa = 2, nt = 1, sa = 3, q = 2, nsw = 1, v = 2, t = 1 Stigler Diet The Stigler diet is an optimization problem named for George Stigler, a 1982 Nobel Laureate in economics, who posed the following problem:\nFor a moderately active man weighing 154 pounds, how much of each of 77 foods should be eaten on a daily basis so that the man’s intake of nine nutrients will be at least equal to the recommended dietary allowances (RDAs) suggested by the National Research Council in 1943, with the cost of the diet being minimal?\n(Taken from Wikipedia).\nIt is also one of the OR-Tools examples for linear optimization. OR-Tools contains a full example in C#, but here the challenge was to turn it into F#.\nGetting the data I wanted to take the data directly from the web page to avoid any typing errors when copying the values. There are two tables of interests: one for the nutrients and one for the commodities. The get the data, the package FSharp.Data is used. It generates a dynamic type from the given URL and tables can be parsed row by row\nThe nutrient table looks like this:\nNutrient Daily Recommended Intake Calories 3,000 calories Protein 70 grams So we also have to extract the pure number from the second colum with the function extractFloat. In addition, calories and vitamin A have to be divided by 1000, since with commodities they are given as kilos.\nThe nutrients will give us the boundaries, and the commodities the coefficients. Each commodity corresponds to a variable.\nopen FSharp.Data [\u0026lt;Literal\u0026gt;] let StiglerURL = \u0026#34;https://developers.google.com/optimization/lp/stigler_diet\u0026#34; type StiglerData = HtmlProvider\u0026lt;StiglerURL\u0026gt; let nutrientsTable = StiglerData.Load(StiglerURL).Tables.``Nutrients list`` let commoditiesTable = StiglerData.Load(StiglerURL).Tables.``Commodities list`` let extractFloat (s: string): float = Text.RegularExpressions.Regex.Replace(s, @\u0026#34;[a-zA-Z \u0026#39;,]\u0026#34;, \u0026#34;\u0026#34;) |\u0026gt; float let nutrients = nutrientsTable.Rows |\u0026gt; Array.map (fun row -\u0026gt; let name = row.Nutrient let intake = row.``Daily Recommended Intake`` |\u0026gt; extractFloat {| Name = row.Nutrient Intake = if name.Contains(\u0026#34;Calories\u0026#34;) || name.Contains(\u0026#34;Vitamin A\u0026#34;) then intake / 1000.0 else intake |} ) let commodities = commoditiesTable.Rows |\u0026gt; Array.map (fun row -\u0026gt; {| Name = row.Commodity Price = row.``1939 price (cents)`` Unit = row.Unit Nutrients = [| float row.``Calories (kcal)`` float row.``Protein (g)`` float row.``Calcium (g)`` float row.``Iron (mg)`` float row.``Vitamin A (KIU)`` float row.``Thiamine (mg)`` float row.``Riboflavin (mg)`` float row.``Niacin (mg)`` float row.``Ascorbic Acid (mg)`` |] |} ) Now we can convert this to the usual arrays:\n// create the linear solver let solver = Solver.CreateSolver(\u0026#34;GLOP\u0026#34;) assert not (isNull solver) // create variables commodities |\u0026gt; Array.iter (fun commodity -\u0026gt; solver.MakeNumVar(0.0, Double.PositiveInfinity, commodity.Name) |\u0026gt; ignore ) let coefficients = commodities |\u0026gt; Array.map (fun com -\u0026gt; com.Nutrients ) |\u0026gt; array2D // constraints nutrients |\u0026gt; Array.iteri (fun i nut -\u0026gt; let con = solver.MakeConstraint(nut.Intake, Double.PositiveInfinity, nut.Name) for j in 0..coefficients.GetLength(1)-1 do con.SetCoefficient(solver.variables().[j], coefficients.[i, j]) ) Optimization Julia TBD\nFlips Flips is an F# library for modeling and solving Linear Programming (LP) and Mixed-Integer Programming (MIP) problems. It is inspired by the work of the PuLP library for Python and the excellent Gurobi Python library. It builds on the work of the outstanding Google OR-Tools library and the OPTANO library.\nFor me, it turned out that Flips is much more suited for F# programming of optimization problems that OR-Tools, which is not designed to be used with functional, strongly typed programming languages.\nReferences Prof. Juraj Stacho, Columbia University, New York: Introduction to Operations Research Prof. Roughan: Optimisation and Operation Research Google OR-Tools Stigler Diet with Gurobi Geek culture: A primer on the OR libraries in python and julia Mosek Modelling Cookbook Towards Data Science: Supply Planning Notes Still looking for the best way to layout these equations with LaTeX.\nI took the liberty to change USD to EUR, since it doesn\u0026rsquo;t conflict with the $ sign used for mathematical Latex formatting.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/post/2022-12-31-operation-research/","summary":"\u003cp\u003eOperation Research is defined in \u003ca href=\"https://en.wikipedia.org/wiki/Operations_research\"\u003eWikipedia\u003c/a\u003e as\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOperations research (British English: operational research) \u0026hellip; , often shortened to the initialism OR, is a discipline that deals with the development and application of analytical methods to improve decision-making. It is considered to be a subfield of mathematical sciences.\u003c/p\u003e","title":"Operation research"},{"content":"There is once in a while the need to extract pure text from PDF files. This blog shows some attempts to do it with dot, with ruby, and with command line utitilites.\nDotnet SautinSoft See SautinSoft.\n#r \u0026#34;nuget: sautinsoft.pdffocus\u0026#34; let fn = \u0026#34;filename\u0026#34; let focus = new SautinSoft.PdfFocus(); focus.OpenPdf(fn) printfn \u0026#34;page count = %i\u0026#34; focus.PageCount let result = focus.ToText() printfn \u0026#34;result: %s\u0026#34; result Unfortunately, the result was always empty.\niText7 See itext7-dotnet.\nSee dotnet-queries.\n#r \u0026#34;nuget: itext7\u0026#34; open iText.Kernel open iText.Kernel.Pdf let reader = new PdfReader(fn) let doc = new PdfDocument(reader) let pages = [ for pn in 1 .. doc.GetNumberOfPages() do yield doc.GetPage(pn) ] pages |\u0026gt; Seq.map (fun page -\u0026gt; Canvas.Parser.PdfTextExtractor.GetTextFromPage(page)) |\u0026gt; String.concat Environment.NewLine This works nicely and extracts the text from the PDF file. Note that this was not tried on PDF files which were scanned.\nRuby With ruby, I found some quite useful libraries (ruby calls them gems) to do this.\npdf-reader will read a pdf file (not a scanned one) and transfer it per page into text. To use it, you first have to install the gem:\n$ gem install pdf-reader Then use it in your ruby code:\nrequire \u0026#39;pdf-reader\u0026#39; reader = PDF::Reader.new(\u0026#34;myfile.pdf\u0026#34;) text = reader.pages.map do |page| page.text end The docmentation of pdf-reader is quite good, it worked successfully for me to analyse several thousand pdf files.\nCommand line utities I found two command lines utilities, xpdf andn poppler which does a lot of pdf conversions.\n### xpdf\nIt can be installed using:\nbrew install xpdf Another option according to above is poppler:\nbrew install poppler Poppler is a library, not a command line utility.\nI haven\u0026rsquo;t tried either so far.\nOther utilities xpdf installs the following command line tools:\nxpdf: PDF viewer (click for a screenshot) pdftotext: converts PDF to text pdftops: converts PDF to PostScript pdftoppm: converts PDF pages to netpbm (PPM/PGM/PBM) image files pdftopng: converts PDF pages to PNG image files pdftohtml: converts PDF to HTML pdfinfo: extracts PDF metadata pdfimages: extracts raw images from PDF files pdffonts: lists fonts used in PDF files pdfdetach: extracts attached files from PDF files % pdftotext -h pdftotext version 4.05 [www.xpdfreader.com] Copyright 1996-2024 Glyph \u0026amp; Cog, LLC Usage: pdftotext [options] \u0026lt;PDF-file\u0026gt; [\u0026lt;text-file\u0026gt;] -f \u0026lt;int\u0026gt; : first page to convert -l \u0026lt;int\u0026gt; : last page to convert -layout : maintain original physical layout -simple : simple one-column page layout -simple2 : simple one-column page layout, version 2 -table : similar to -layout, but optimized for tables -lineprinter : use strict fixed-pitch/height layout -raw : keep strings in content stream order -fixed \u0026lt;number\u0026gt; : assume fixed-pitch (or tabular) text -linespacing \u0026lt;number\u0026gt; : fixed line spacing for LinePrinter mode -clip : separate clipped text -nodiag : discard diagonal text -enc \u0026lt;string\u0026gt; : output text encoding name -eol \u0026lt;string\u0026gt; : output end-of-line convention (unix, dos, or mac) -nopgbrk : don\u0026#39;t insert a page break at the end of each page -bom : insert a Unicode BOM at the start of the text file -marginl \u0026lt;number\u0026gt; : left page margin -marginr \u0026lt;number\u0026gt; : right page margin -margint \u0026lt;number\u0026gt; : top page margin -marginb \u0026lt;number\u0026gt; : bottom page margin -opw \u0026lt;string\u0026gt; : owner password (for encrypted files) -upw \u0026lt;string\u0026gt; : user password (for encrypted files) -verbose : print per-page status information -q : don\u0026#39;t print any messages or errors -cfg \u0026lt;string\u0026gt; : configuration file to use in place of .xpdfrc -listencodings : list all available output text encodings -v : print copyright and version info -h : print usage information -help : print usage information --help : print usage information -? : print usage information ","permalink":"http://localhost:1313/post/2022-12-01-pdf-converter/","summary":"\u003cp\u003eThere is once in a while the need to extract pure text from PDF files. This blog shows some attempts to do it with dot, with \u003ca href=\"https://www.ruby-lang.org/en/\"\u003eruby\u003c/a\u003e, and with command line utitilites.\u003c/p\u003e","title":"PDF to text conversion"},{"content":" Bolero is a set of free and open-source libraries and tools to write web applications in F#. With it, you can write fully dynamic client-side web applications from the comfort of a strongly-typed functional language, all with great performance.\nYou develop F# code for the client side (inside the browser), which is compiled into WebAssembly. The views are either F# codes or Html templates.\nThe client contains predefined \u0026lt;input\u0026gt; types for text, numbers and booleans, but not for file uploads. How can this be done?\nClient and Server Bolero uses the Elmish Model-View-Update architecture.\nYou develop F# code for the client side (inside the browser), which is compiled into WebAssembly. The views are either F# codes or Html templates.\nThe client communicates with the server using SignalR connections. The server uses standard ASPNET.\nThere are two potential approaches:\nUpload a file to the client and use the file\u0026rsquo;s data on the client.\nUpload a file to the client and pass it on to the server for more complex file data procedures.\nSimple example It contains predefined \u0026lt;input\u0026gt; types for text, numbers and booleans, but not for file uploads. How can this be done?\nOn client type Model = { Name: string } let init = { Name = \u0026#34;\u0026#34; } type Message = | SetName of string let update message model = match message with | SetName n -\u0026gt; { model with Name = n } let viewInput modelData setValue = input { attr.value modelData on.change (fun e -\u0026gt; setValue (unbox e.Value)) } let view model dispatch = div { input { attr.value = model.Name on.change (fun e -\u0026gt; dispatch (SetName (unbox e.Value))) } $\u0026#34;Hallo, {model.Name}!\u0026#34; } Now the problem is, that there exist views for \u0026lt;input\u0026gt; types string, numbers and booleans, but not for file input.\nApproach 1: Using JavaScript TBD\nApproach 2: Using Blazor component TBD\nApproach 3: Using Server posts An example for this can be found on my Github/BoleroApp repository. It implements a simple AspNet MVC controller for file uploads.\nSee also this post.\nFurther information See https://procodeguide.com/programming/file-upload-in-aspnet-core/ for an example how to implement file upload in Asp.Net Core 6.0.\n","permalink":"http://localhost:1313/post/2022-10-20-input-file/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://fsbolero.io\"\u003eBolero\u003c/a\u003e is a set of free and open-source libraries and tools to write web applications in \u003ca href=\"https://fsharp.org/\"\u003eF#\u003c/a\u003e. With it, you can write fully dynamic client-side web applications from the comfort of a strongly-typed functional language, all with great performance.\u003c/p\u003e","title":"Input file element with Bolero"},{"content":"Had some problems creating a local nuget repository. This is how I succeeded:\nCreate a local nuget repository / source $ cli nuget add source ~/.mynuget This leads to these changes in the configuration file:\n% cat ~/.nuget/NuGet/NuGet.Config \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;packageSources\u0026gt; \u0026lt;add key=\u0026quot;nuget.org\u0026quot; value=\u0026quot;https://api.nuget.org/v3/index.json\u0026quot; protocolVersion=\u0026quot;3\u0026quot; /\u0026gt; \u0026lt;add key=\u0026quot;Package source 1\u0026quot; value=\u0026quot;/Users/mmgreiner/.mynuget\u0026quot; /\u0026gt; \u0026lt;/packageSources\u0026gt; \u0026lt;/configuration\u0026gt; Prepare the project file To the project config file (*.fsproj or *.csproj), add:\n\u0026lt;PackageId\u0026gt;CSLData\u0026lt;/PackageId\u0026gt; \u0026lt;Version\u0026gt;1.0.0\u0026lt;/Version\u0026gt; \u0026lt;Authors\u0026gt;Markus Greiner\u0026lt;/Authors\u0026gt; \u0026lt;Company\u0026gt;mmgreiner\u0026lt;/Company\u0026gt; Note that the PackageID should not contain the version name, so don\u0026rsquo;t: CSLData.1.0.0.Test. This will not work with publishing the nuget package.\nPack and publish % dotnet pack MSBuild version 17.3.0+92e077650 for .NET Determining projects to restore... All projects are up-to-date for restore. CSLData -\u0026gt; /Users/mmgreiner/Projects/bibTeX/CSL/CSLData/bin/Debug/net6.0/CSLData.dll Successfully created package '/Users/mmgreiner/Projects/bibTeX/CSL/CSLData/bin/Debug/CSLData.1.0.0.nupkg'. Using nuget directly, you can add it locally.\n% nuget add /Users/mmgreiner/Projects/bibTeX/CSL/CSLData/bin/Debug/CSLData.1.0.0.nupkg -source ~/.mynuget Using the CLI it works like this:\n% dotnet nuget push bin/Debug/CSLData.1.0.0.nupkg -s ~/.mynuget Note: in the dotnet CLI, the command is called push which corresponds to nuget add. The CLI command dotnet nuget add adds a new source, ie. repository, not a package.\nThis generates the following file structure:\n/Users/mmgreiner/.mynuget ├── csldata │ └── 1.0.0 │ ├── csldata.1.0.0.nupkg │ ├── csldata.1.0.0.nupkg.sha512 │ └── csldata.nuspec Use it Now you can use it in another project:\n$ dotnet add package CSLData The source does not have to be given.\n","permalink":"http://localhost:1313/post/2022-10-16-nuget-local/","summary":"\u003cp\u003eHad some problems creating a local nuget repository. This is how I succeeded:\u003c/p\u003e\n\u003ch2 id=\"create-a-local-nuget-repository--source\"\u003eCreate a local nuget repository / source\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e$ cli nuget add source ~/.mynuget\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis leads to these changes in the configuration file:\u003c/p\u003e","title":"Using local NuGet source / repository"},{"content":"Helping out a friend to get a Matura thesis completed, I stumbled onto the topics of citations and bibliographies. In the end, I wanted to get a handle on bibliographies using dotnet code.\nZotero I installed Zotero, which was recommended by my daughter who had used it for her master thesis. It basically is a database (located either locally on your computer or on the web, with optional synchronization) of all the books, articles, etc you want in your bibliography.\nNote: On OSX, another commonly used tool is BibDesk.\nBetter BibTeX There is an extension to Zotero called Better-BibTeX, which I installed.\nBetter BibTeX (BBT) is a plugin for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown).\nFeatures Facilities for generating citation keys Conversion between formats and encodings Facilities for exporting data from Zotero Visual Studio Code Pick citation from Visual Studio Code: https://marketplace.visualstudio.com/items?itemName=mblode.zotero.\nIt pops up a little window which lets you choose the bibliography entry from Zotero and creates a unique identifier:\n@durrenmattDurcheinandertalRoman1989\nHowever, it is unclear how this can be used inside markdown.\nFurther information I also found this link https://lucidmanager.org/productivity/hugo-bibliography/ which is worth reading. It defines particals for citations.\nFile Formats The oldest and best known (but cryptic) file format for a bibliography is BibTeX. It comes in a .bib file. A typical format looks like this:\n@book{durrenmatt_durcheinandertal_1989, address = {Zürich}, title = {Durcheinandertal: {Roman}}, isbn = {978-3-257-01820-2}, shorttitle = {Durcheinandertal}, publisher = {Diogenes}, author = {Dürrenmatt, Friedrich}, year = {1989}, } @article{noauthor_wer_2022, title = {Wer entblösst hier eigentlich wen?}, issn = {2504-4648}, journal = {Aargauer Zeitung}, month = aug, year = {2022}, pages = {6--7}, } These files are difficult to parse with a software program. So I looked for other possible formats to store bibliographies. Zotero lists these export formats:\nThese are described in more detail in Zotero-data-formats. I chose to take a look into the CSL Json format.\nCSL Json CSL stands for Citation Style Language. I found a good overview and the JSON schema on Github-CSL.\nThis is the official repository for schemas describing the Citation Style Language (CSL). Current schemas include:\nCSL schema - describes CSL style and locale XML files CSL-JSON schema - describes a commonly used JSON data model for storing CSL processor input (such as bibliographic metadata). For more information about CSL, visit https://citationstyles.org. For general quesions and discussions have a look at the CSL-forum.\nA sample CLS Json file may look like this:\n[ { \u0026#34;id\u0026#34;: \u0026#34;http://zotero.org/users/10298668/items/SH797ZU6\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;article-newspaper\u0026#34;, \u0026#34;container-title\u0026#34;: \u0026#34;Aargauer Zeitung\u0026#34;, \u0026#34;ISSN\u0026#34;: \u0026#34;2504-4648\u0026#34;, \u0026#34;page\u0026#34;: \u0026#34;6-7\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Wer entblösst hier eigentlich wen?\u0026#34;, \u0026#34;issued\u0026#34;: { \u0026#34;date-parts\u0026#34;: [ [ \u0026#34;2022\u0026#34;, 8, 27 ] ] } }, { \u0026#34;id\u0026#34;: \u0026#34;http://zotero.org/users/10298668/items/TL3Z9724\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;book\u0026#34;, \u0026#34;call-number\u0026#34;: \u0026#34;MLCS 90/03506 (P)\u0026#34;, \u0026#34;event-place\u0026#34;: \u0026#34;Zürich\u0026#34;, \u0026#34;ISBN\u0026#34;: \u0026#34;978-3-257-01820-2\u0026#34;, \u0026#34;number-of-pages\u0026#34;: \u0026#34;175\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;Diogenes\u0026#34;, \u0026#34;publisher-place\u0026#34;: \u0026#34;Zürich\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;Library of Congress ISBN\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Durcheinandertal: Roman\u0026#34;, \u0026#34;title-short\u0026#34;: \u0026#34;Durcheinandertal\u0026#34;, \u0026#34;author\u0026#34;: [ { \u0026#34;family\u0026#34;: \u0026#34;Dürrenmatt\u0026#34;, \u0026#34;given\u0026#34;: \u0026#34;Friedrich\u0026#34; } ], \u0026#34;issued\u0026#34;: { \u0026#34;date-parts\u0026#34;: [ [ \u0026#34;1989\u0026#34; ] ] } } ] Obviously, this is easier to handle than the .bib format.\nCSL Json Schema The CSL Json Schema describes how json files have to look like to confirm to CSL. There are two CSL Json schema definitions:\nCSL-Data-Json-Schema for a bibliographic entry CSL-Citaton-Json-Schema for a citation entry The CSL-Data-Json-Schema looks like this:\n{ \u0026#34;description\u0026#34;: \u0026#34;JSON schema for CSL input data\u0026#34;, \u0026#34;$schema\u0026#34;: \u0026#34;http://json-schema.org/draft-07/schema#\u0026#34;, \u0026#34;$id\u0026#34;: \u0026#34;https://resource.citationstyles.org/schema/v1.0/input/json/csl-data.json\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;, \u0026#34;items\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;type\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;enum\u0026#34;: [ \u0026#34;article\u0026#34;, \u0026#34;article-journal\u0026#34;, \u0026#34;article-magazine\u0026#34;, \u0026#34;article-newspaper\u0026#34;, \u0026#34;bill\u0026#34;, \u0026#34;book\u0026#34;, \u0026#34;broadcast\u0026#34;, \u0026#34;chapter\u0026#34;, \u0026#34;classic\u0026#34;, \u0026#34;collection\u0026#34;, \u0026#34;dataset\u0026#34;, \u0026#34;document\u0026#34;, \u0026#34;entry\u0026#34;, \u0026#34;entry-dictionary\u0026#34;, \u0026#34;entry-encyclopedia\u0026#34;, \u0026#34;event\u0026#34;, \u0026#34;figure\u0026#34;, \u0026#34;graphic\u0026#34;, \u0026#34;hearing\u0026#34;, \u0026#34;interview\u0026#34;, \u0026#34;legal_case\u0026#34;, \u0026#34;legislation\u0026#34;, \u0026#34;manuscript\u0026#34;, \u0026#34;map\u0026#34;, \u0026#34;motion_picture\u0026#34;, \u0026#34;musical_score\u0026#34;, \u0026#34;pamphlet\u0026#34;, \u0026#34;paper-conference\u0026#34;, \u0026#34;patent\u0026#34;, \u0026#34;performance\u0026#34;, \u0026#34;periodical\u0026#34;, \u0026#34;personal_communication\u0026#34;, \u0026#34;post\u0026#34;, \u0026#34;post-weblog\u0026#34;, \u0026#34;regulation\u0026#34;, \u0026#34;report\u0026#34;, \u0026#34;review\u0026#34;, \u0026#34;review-book\u0026#34;, \u0026#34;software\u0026#34;, \u0026#34;song\u0026#34;, \u0026#34;speech\u0026#34;, \u0026#34;standard\u0026#34;, \u0026#34;thesis\u0026#34;, \u0026#34;treaty\u0026#34;, \u0026#34;webpage\u0026#34; ] }, \u0026#34;id\u0026#34;: { \u0026#34;type\u0026#34;: [ \u0026#34;string\u0026#34;, \u0026#34;number\u0026#34; ] }, \u0026#34;citation-key\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34; }, Since in the end I wanted to use software to parse CSL-formatted bibliographies, I needed to turn these JSON files into dotnet classes.\nA good another link to look at, particularly concering the handling of author names, is citeproj-js.\nFrom Json Schema to dotnet classes I started with the CSL-Data-Json-Schema. This now needed to be converted into dotnet classes. For this, I found the tool NJsonSchema by Rico Suter.\nThis promised to generate C# classes from the given schema. I used this code to do so:\nlet raw = \u0026#34;https://github.com/citation-style-language/schema/raw/master/schemas/input/csl-data.json\u0026#34; let schema = NJsonSchema.JsonSchema.FromUrlAsync(raw).Result let generator = new NJsonSchema.CodeGeneration.CSharp.CSharpGenerator(schema) let file = generator.GenerateFile() let outfn = Path.Combine(__SOURCE_DIRECTORY__, \u0026#34;gen-classes.cs\u0026#34;) printfn \u0026#34;writing to %s\u0026#34; outfn File.WriteAllText(outfn, file) Now the generated C# code looks like this:\n//---------------------- // \u0026lt;auto-generated\u0026gt; // Generated using the NJsonSchema v10.8.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org) // \u0026lt;/auto-generated\u0026gt; //---------------------- namespace MyNamespace { #pragma warning disable // Disable all warnings [System.CodeDom.Compiler.GeneratedCode(\u0026#34;NJsonSchema\u0026#34;, \u0026#34;10.8.0.0 (Newtonsoft.Json v9.0.0.0)\u0026#34;)] public partial class Anonymous { [Newtonsoft.Json.JsonProperty(\u0026#34;type\u0026#34;, Required = Newtonsoft.Json.Required.Always)] [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)] [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))] public Type Type { get; set; } [Newtonsoft.Json.JsonProperty(\u0026#34;id\u0026#34;, Required = Newtonsoft.Json.Required.Always)] [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)] public double Id { get; set; } [Newtonsoft.Json.JsonProperty(\u0026#34;citation-key\u0026#34;, Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)] public string CitationKey { get; set; } // ... I changed two things:\nrename namespace and class name to `CSLData`` change the type of Id to string. In the CSL-schema-raw, the type of Id had two possibilities: string or double. The converter picked double which caused run time exceptions. This code was put into a dotnet library CSLData.\nParsing a CSL File Now to some code to parse the CSL files. I tried the following:\n// #r \u0026#34;nuget: Newtonsoft.Json\u0026#34; open System open System.Text.Json open CSLData open Newtonsoft.Json let fn = \u0026#34;./Exported-Items.json\u0026#34; let json = IO.File.ReadAllText(fn) // standard does NOT work, all data is zero let csl = System.Text.Json.JsonSerializer.Deserialize\u0026lt;CSLData.CSLData list\u0026gt;(json) printfn \u0026#34;csl = %A %A\u0026#34; csl csl.Head.Id // Newtonsoft works let csl\u0026#39; = Newtonsoft.Json.JsonConvert.DeserializeObject\u0026lt;CSLData.CSLData list\u0026gt;(json) printfn \u0026#34;cls\u0026#39; = %A %A\u0026#34; csl\u0026#39; csl\u0026#39;.Head.Id Turns out that System.Text.Json deserializes without exception, but all the values are zero or null. The Newtonsoft deserializer works.\nOne issue still open is to make this more F# friendly with options instead of nulls. More on Zotero I installed Zotero. It is programmed in JavaScript and uses a SQLite database as local storage Zotero-dev.\nYou need to register as user, and then you can get an API UserId https://www.zotero.org/settings/keys. In my case, that is 12345678.\nUsing this user id, you can access your bibliography library using:\n$ curl https://api.zotero.org/users/12345678/collections [ { \u0026#34;key\u0026#34;: \u0026#34;KEYKEY\u0026#34;, \u0026#34;version\u0026#34;: 3, \u0026#34;library\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;id\u0026#34;: 12345678, \u0026#34;name\u0026#34;: \u0026#34;mmgreiner\u0026#34;, \u0026#34;links\u0026#34;: { \u0026#34;alternate\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://www.zotero.org/mmgreiner\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34; } } }, \u0026#34;links\u0026#34;: { \u0026#34;self\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://api.zotero.org/users/10298668/collections/KEYKEY\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/json\u0026#34; }, \u0026#34;alternate\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://www.zotero.org/mmgreiner/collections/KEYKEY\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34; } }, \u0026#34;meta\u0026#34;: { \u0026#34;numCollections\u0026#34;: 0, \u0026#34;numItems\u0026#34;: 17 }, \u0026#34;data\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;XXXXX\u0026#34;, \u0026#34;version\u0026#34;: 3, \u0026#34;name\u0026#34;: \u0026#34;Lea\u0026#34;, \u0026#34;parentCollection\u0026#34;: false, \u0026#34;relations\u0026#34;: {} } }, { \u0026#34;key\u0026#34;: \u0026#34;XXXXX\u0026#34;, \u0026#34;version\u0026#34;: 3, \u0026#34;library\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;id\u0026#34;: 12345678, \u0026#34;name\u0026#34;: \u0026#34;mmgreiner\u0026#34;, \u0026#34;links\u0026#34;: { \u0026#34;alternate\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://www.zotero.org/mmgreiner\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34; } } }, \u0026#34;links\u0026#34;: { \u0026#34;self\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://api.zotero.org/users/10298668/collections/KEYKEY\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;application/json\u0026#34; }, \u0026#34;alternate\u0026#34;: { \u0026#34;href\u0026#34;: \u0026#34;https://www.zotero.org/mmgreiner/collections/KEYKEY\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/html\u0026#34; } }, \u0026#34;meta\u0026#34;: { \u0026#34;numCollections\u0026#34;: 0, \u0026#34;numItems\u0026#34;: 2 }, \u0026#34;data\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;XXXXX\u0026#34;, \u0026#34;version\u0026#34;: 3, \u0026#34;name\u0026#34;: \u0026#34;Greiner\u0026#34;, \u0026#34;parentCollection\u0026#34;: false, \u0026#34;relations\u0026#34;: {} } } ## Citations\nThere are many standards how the citation and the bibliography could look. there is even a language to define how citations could look: CSL:\nFor instance:\nAAA APA APSA ASA Chicago (Turabian) author-date CSE name-year Harvard MLA ACS AMA CSE citation-name or citation-sequence IEEE NLM Vancouver Misc. ISBN Numbers Automatically generate citation from ISBN number\nIMDb for films Get Citations of films: No standard, but can use film database IMDb, which has a sequence number, Ex Manhattan has number Woody Allen: Manhattan tt0079522\nCode to generate from PDF: bibtex-generator\nSupport in Github See this stackoverflow article, or directly on Github.\nFurther information:\nhttps://github.com/citation-file-format/citation-file-format#tools-to-work-with-citationcff-files-wrench https://github.com/citation-file-format/ruby-cff ","permalink":"http://localhost:1313/post/2022-10-13-bibliography/","summary":"\u003cp\u003eHelping out a friend to get a Matura thesis completed, I stumbled onto the topics of citations and bibliographies. In the end, I wanted to get a handle on bibliographies using dotnet code.\u003c/p\u003e","title":"Bibliographies, citations and dotnet programming"},{"content":"Templating is an proofen method to create static web pages. Typically, you write your html pages and fill in some parameters at page assembly time. Well-known templating languages are Liquid, which is written in ruby and used by Jekyll, and Handlebars, which calls itself minimal templating on steroids.\nFor both there exist dotnet versions: Handlebars.Net and DotLiquid.\nThis post compares these two. In addition, it also takes a brief look at Scriban and Fluid.\nCode samples are available at Github mmgreiner.\nThe task You have several persons which have tasks to perform. We will test how F# types, particularely sequences, records and options, are handled.\ntype Chore = { Name: string DueDate: DateTime Completed: DateTime option } type Person = { Name: string Chores: Task seq } module Data = let persons = seq { { Name = \u0026#34;Markus\u0026#34; Tasks = seq { { Name = \u0026#34;Clean House\u0026#34;; DueDate = DateTime.Today; Completed = Some DateTime.MaxValue} { Name = \u0026#34;Feed the cat Milou\u0026#34;; DueDate = DateTime.Today; Completed = None } } } { Name = \u0026#34;Milou\u0026#34; Tasks = Seq.empty } } Handlebars Handlebars use a very simple syntax. Expressions are {{ followed by content, followed by }}. Blocks are used for iterations {{#each}} or if statements {{#if}}. A simple Handlebars line looks like this:\n\u0026lt;p\u0026gt;Hallo {{Name}}\u0026lt;/p\u0026gt; Installation $ dotnet add package Handelbars.Net And in FSharp:\nopen HandlebarsDotNet Template {% raw %} let templateString = \u0026#34;\u0026#34;\u0026#34; \u0026lt;ul\u0026gt; {{#each Persons}} \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;{{this.Name}} has the following tasks to do:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {{#each this.Chores}} \u0026lt;li\u0026gt;{{this.Name}} by {{date_format this.DueDate}}{{#if this.Completed}}, completed {{date_format this.Completed.Value}} {{/if}} \u0026lt;/li\u0026gt; {{else}} \u0026lt;li\u0026gt;Free afternoon\u0026lt;/li\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; {{/each}} \u0026lt;/ul\u0026gt; \u0026#34;\u0026#34;\u0026#34; {% endraw %} let template = Handlebars.Compile(templateString) The html template is a simple list of persons with a list for each person of it\u0026rsquo;s tasks.\nSome points to note:\nCompletedis of type Option\u0026lt;DateTime\u0026gt;. So first we have to test that it is not null {{#if this.Completed}}, and then access it\u0026rsquo;s Value. if a list is empty, you can add {{else}} which is processed for the empty list. date_formatis a helper that is not part of standard Handlebars. Helpers You can create your own helpers, as documented in Handlebars. the context typically corresponds to the this of the expression, but you can also use parameters for it.\nHandlebars.RegisterHelper (\u0026#34;date_format\u0026#34;, fun writer (context: Context) (parameters: Arguments) -\u0026gt; let dt = match parameters |\u0026gt; Seq.head with | :? DateTime as d -\u0026gt; d.ToString(\u0026#34;yyyy-MM-dd\u0026#34;) | _ -\u0026gt; sprintf \u0026#34;Type of %s is %A, not DateTime\u0026#34; (context.Value.ToString()) (context.Value.GetType()) writer.WriteSafeString(dt) ) Template location tbd\nThe program First, we need to define a anonymous record with the field Projects. Then, we create the template and instantiate it with the data:\nlet data = {| Persons = persons |} let result = template.Invoke(data) This should give us:\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;Markus has the following tasks to do:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Clean House by 2022-08-29, completed 9999-12-31 \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Feed cat by 2022-08-29 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;Milou has the following tasks to do:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Free afternoon\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/ul\u0026gt; DotLiquid Liquid was made popular by Ruby based static templating engines like Jekyll. DotLiquid is a dotnet base implementation.\nInstallation \u0026gt; dotnet add package DotLiquid And in FSharp:\nopen DotLiquid open FSharp.Reflection We will use reflection to register types.\nTemplate let templateString = \u0026#34;\u0026#34;\u0026#34; {%raw%}\u0026lt;ul\u0026gt; {% for person in Persons %} \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;{{person.Name}} has the following tasks to do:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {% for task in person.Chores %} \u0026lt;li\u0026gt;{{ task.Name }} by {{task.DueDate | Date: \u0026#34;%Y-%m-%d\u0026#34;}} {%if task.Completed %}, completed {{task.Completed.Value | date: \u0026#34;%Y-%m-%d\u0026#34;}} {%endif%} \u0026lt;/li\u0026gt; {% else %}Free afternoon {% endfor %} \u0026lt;/ul\u0026gt; {%endfor%} \u0026lt;/ul\u0026gt;{%endraw%} \u0026#34;\u0026#34;\u0026#34; Registering types Liquid and DotLiquid are very careful to only expose record fields that have explicitly been declared to be visible. This requires us to register all necessary types. A little helper function can support here.\n/// Helper function to register types let RegisterRecordType (typ: Type) = let members (typ: Type) = if FSharpType.IsRecord typ then FSharpType.GetRecordFields(typ) |\u0026gt; Seq.map (fun f -\u0026gt; f.Name) |\u0026gt; Seq.toArray else Array.empty Template.RegisterSafeType(typ, members typ) [ typeof\u0026lt;Person\u0026gt;; typeof\u0026lt;Task\u0026gt;; typeof\u0026lt;PersonList\u0026gt; ] |\u0026gt; List.iter RegisterRecordType // DateTime option is not a record type, so the above registration does not work Template.RegisterSafeType(typeof\u0026lt;Option\u0026lt;DateTime\u0026gt;\u0026gt;, [|\u0026#34;Value\u0026#34;|]) Note that DateTime option is not a record and has to be registered separately. I did not succeed in registering a generic type like Option\u0026lt;_\u0026gt;.\nNote that we also declared the type type PersonList = { Persons: Person seq } to have a type for the top level.\nHelper functions: tbd\nNaming Conventions DotLiquid supports Ruby style naming convention (snake case) and CamelCase conventions. By default, it uses Ruby casing conventions, meaning that it turns turns names like DueDate into due_date.\nTo prevent this, you can set the nameing convention:\nTemplate.NamingConvention \u0026lt;- new NamingConventions.CSharpNamingConvention() Unfortunately, this has the side effect that standard Liquid functions like date also now follow the CamelCase naming convention and become Date. I had to look into StandardFilter.cs to fully understand this.\nWe created our own naming convention for this:\ntype CamelCaseNamingConvention() = let UpperFirstLetter (str: string) = string (Char.ToUpperInvariant(str.[0])) + str.[1..] let LowerFirstLetter (str: string) = string (Char.ToLowerInvariant(str.[0])) + str.[1..] interface NamingConventions.INamingConvention with member val StringComparer: StringComparer = StringComparer.Ordinal member this.GetMemberName name = name member this.OperatorEquals(testedOperator, referenceOperator): bool = UpperFirstLetter testedOperator = referenceOperator || LowerFirstLetter testedOperator = referenceOperator || testedOperator = LowerFirstLetter referenceOperator In the end, we used the supplied NamingConventions.CSharpNamingConvention and wrote Date for the pipe function instead of date.\nDate formats See DotLiquid formatting. By default, DotNet formatting for dates is used. You can change this by:\nLiquid.UseRubyDateFormat \u0026lt;- true The program let data = { Persons = persons } template.Render(Hash.FromAnonymousObject(data)) Fluid Fluid is another open-source templating language based on liquid. It\u0026rsquo;s benchmark compares it to DotLiquid and Handlebars and claims it to be faster compared to those (see fluid-benchmark).\nScriban Scriban is a fast, powerful, safe and lightweight scripting language and engine for .NET, which was primarily developed for text templating with a compatibility mode for parsing Liquid templates.\nIts templating language is less baroque than Liquids, but it can handle liquid input correctly. According to its benchmark, it outperforms DotLiquid, Handlebars.Net, and fluid.\nYou install Scriban using dotnet add package Scriban. The template would look like this:\n{%raw%}\u0026lt;ul\u0026gt; {{- for person in Persons }} \u0026lt;li\u0026gt; \u0026lt;p\u0026gt;{{person.Name}} has the following tasks to do:\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {{- if person.Chores | array.size == 0 }} Free afternoon {{ else }} {{- for task in person.Chores }} \u0026lt;li\u0026gt;{{ task.Name }} by {{task.DueDate | date.to_string \u0026#34;%Y-%m-%d\u0026#34;}}{{if task.Completed -}}, completed {{task.Completed.Value | date.to_string \u0026#34;%Y-%m-%d\u0026#34;}} {{end}} \u0026lt;/li\u0026gt; {{- end }} {{- end }} \u0026lt;/ul\u0026gt; {{- end -}} \u0026lt;/ul\u0026gt;{%endraw%} The code is simple:\nopen Scriban let template = Template.Parse(templateString) let persons = {| Persons = Chores.Data.persons |} let result = template.Render(persons, fun m -\u0026gt; m.Name) printfn \u0026#34;%s\u0026#34; result By default, Scriban uses standard ruby naming with underlines. To prevent this, we have to use the MemberRenamerdelegate with fun m -\u0026gt; m.Name. See Member Renamer in the Scriban documentation for more information.\nComparison Without going into too much details, it seems that Scriban is by far the easiest to use, and, according to its own benchmark, the fastest.\nNote on this post Since this is a Jekyll post, it uses Liquid iself. This means that all references to {{\u0026hellip;}} had to be encapsulated in {%raw%} and {%endraw%}.\n","permalink":"http://localhost:1313/post/2022-08-29-static-templating/","summary":"\u003cp\u003eTemplating is an proofen method to create static web pages. Typically, you write your html pages and fill in some parameters at page assembly time. Well-known templating languages are \u003ca href=\"https://shopify.github.io/liquid/\"\u003eLiquid\u003c/a\u003e, which is written in ruby and used by \u003ca href=\"https://jekyllrb.com\"\u003eJekyll\u003c/a\u003e, and \u003ca href=\"https://handlebarsjs.com\"\u003eHandlebars\u003c/a\u003e, which calls itself \u003cem\u003eminimal templating on steroids\u003c/em\u003e.\u003c/p\u003e","title":"Static templating with handlebars, liquid and others"},{"content":"This blog contains some experiences working with Bolero.\nBolero is a set of free and open-source libraries and tools to write web applications in F#. With it, you can write fully dynamic client-side web applications from the comfort of a strongly-typed functional language, all with great performance.\nBolero is built on top of Blazor, which means it can run in one of two modes: either in WebAssembly directly in the browser, or on the server side with SignalR.\nBolero uses the Elmish Model-View-Update architecture.\nYou develop F# code for the client side (inside the browser), which is compiled into WebAssembly. The views are either F# codes or Html templates.\nServer endpoint for Posts I came across this topic trying to implement a file upload in Bolero. The It starts with the problem that \u0026lt;input type=\u0026quot;file\u0026quot; /\u0026gt;is not supported by Bolero.\nSearching for a solution, I found this conversation about Bolero uploading files, which made the comment to create a ASP.NET Core endpoint. This post explores how to do this.\nHTML We use a standard html form with post to upload the file:\n\u0026lt;form action=\u0026#34;Uploader/PostFiles\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;label\u0026gt; Data files \u0026lt;input type=\u0026#34;file\u0026#34; multiple accept=\u0026#34;.csv,.json\u0026#34; id=\u0026#34;myfiles\u0026#34; name=\u0026#34;myfiles\u0026#34;/\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Upload files\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; Remember the name myfiles. It will be used later on in the ASP.NET controller.\nNote also that the form action does not start with a slash. This is particular important when deploying to an IIS server, when relative URL paths are used.\nASP.NET controller It wasn\u0026rsquo;t easy to find the simplest tutorial on how to write an ASP.NET controller in F#. In the end, stackoverflow was helpful, as was this Microsoft introduction to getting started with web-app and f# and this tutorial MVC file-upload Here is our simple controller:\nnamespace HalloController.Server open System open Microsoft.AspNetCore.Mvc open Microsoft.Extensions.Logging [\u0026lt;ApiController\u0026gt;] [\u0026lt;Route(\u0026#34;[controller]\u0026#34;)\u0026gt;] type UploaderController (logger : ILogger\u0026lt;UploaderController\u0026gt;) = inherit ControllerBase() [\u0026lt;HttpGet\u0026gt;] // match GET Uploader/ member _.Get() = logger.LogInformation(\u0026#34;Inside UploadController Get\u0026#34;) \u0026#34;this is a simple GET\u0026#34; [\u0026lt;HttpGet(\u0026#34;Info\u0026#34;)\u0026gt;] // match GET Uploader/Info member _.Info() = \u0026#34;this is a GET Info\u0026#34; // important: parameter name has to match id and name in Http \u0026lt;input\u0026gt; [\u0026lt;HttpPost(\u0026#34;PostFiles\u0026#34;)\u0026gt;] member _.PostFiles(myfiles: System.Collections.Generic.List\u0026lt;Microsoft.AspNetCore.Http.IFormFile\u0026gt;) = logger.LogInformation(\u0026#34;Inside Uploader PostFiles\u0026#34;) for f in myfiles do printfn \u0026#34;filename = %s\u0026#34; f.FileName \u0026#34;success\u0026#34; It took me some time to understand how the routes are mapped.\nThe class name UploaderController provides the route part Uploader. the member attribute provides the next route part Info or PostFiles. So the complete routes are: http://localhost:12345/Uploader/Info. It also took some time to discover that the name of the parameter of the post, myfiles must match exactly the name of the \u0026lt;input type=\u0026quot;file\u0026quot; name=\u0026quot;myfiles\u0026quot; /\u0026gt; for the parameter to be set.\nServer side So how do we make the server recognize our controller? This is where the magic of dependency injection kicks in. We just have to add it to the services and endpoints.\nFor the services, add the line services.AddControllers() to the ConfigureServices member.\nFor the endpoints, add the line endpoints.MapControllers() to the mapped endpoints.\ntype Startup() = // This method gets called by the runtime. Use this method to add services to the container. // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940 member this.ConfigureServices(services: IServiceCollection) = services.AddControllers() |\u0026gt; ignore // added services.AddMvc() |\u0026gt; ignore services.AddServerSideBlazor() |\u0026gt; ignore services .AddAuthorization() .AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme) .AddCookie() .Services .AddRemoting\u0026lt;BookService\u0026gt;() .AddBoleroHost() #if DEBUG .AddHotReload(templateDir = __SOURCE_DIRECTORY__ + \u0026#34;/../HalloController.Client\u0026#34;) #endif |\u0026gt; ignore // This method gets called by the runtime. Use this method to configure the HTTP request pipeline. member this.Configure(app: IApplicationBuilder, env: IWebHostEnvironment) = app .UseAuthentication() .UseRemoting() .UseStaticFiles() .UseRouting() .UseBlazorFrameworkFiles() .UseEndpoints(fun endpoints -\u0026gt; #if DEBUG endpoints.UseHotReload() #endif endpoints.MapControllers() |\u0026gt; ignore // added endpoints.MapBlazorHub() |\u0026gt; ignore endpoints.MapFallbackToBolero(Index.page) |\u0026gt; ignore) |\u0026gt; ignore That\u0026rsquo;s it!\nNow when you run the server, and post the files, ASP.NET will log the following message:\ninfo: Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker[3] Route matched with {action = \u0026#34;PostFiles\u0026#34;, controller = \u0026#34;Uploader\u0026#34;}. Executing controller action with signature Void PostFiles(System.Collections.Generic.List`1[Microsoft.AspNetCore.Http.IFormFile]) on controller HalloController.Server.UploaderController (HalloController.Server). This example can be found on my Github/BoleroApp repository. It implements a simple AspNet MVC controller for file uploads.\nTemplating on Bolero Server The standard scaffold for the Bolero server looks like this:\n// index.fs let page = doctypeHtml { head { meta { attr.charset \u0026#34;UTF-8\u0026#34; } meta { attr.name \u0026#34;viewport\u0026#34;; attr.content \u0026#34;width=device-width, initial-scale=1.0\u0026#34; } title { \u0026#34;Bolero Application\u0026#34; } ``base`` { attr.href \u0026#34;/\u0026#34; } link { attr.rel \u0026#34;stylesheet\u0026#34;; attr.href \u0026#34;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css\u0026#34; } link { attr.rel \u0026#34;stylesheet\u0026#34;; attr.href \u0026#34;css/index.css\u0026#34; } } body { nav { attr.``class`` \u0026#34;navbar is-dark\u0026#34; \u0026#34;role\u0026#34; =\u0026gt; \u0026#34;navigation\u0026#34; attr.aria \u0026#34;label\u0026#34; \u0026#34;main navigation\u0026#34; div { attr.``class`` \u0026#34;navbar-brand\u0026#34; a { attr.``class`` \u0026#34;navbar-item has-text-weight-bold is-size-5\u0026#34; attr.href \u0026#34;https://fsbolero.io\u0026#34; img { attr.style \u0026#34;height:40px\u0026#34;; attr.src \u0026#34;https://github.com/fsbolero/website/raw/master/src/Website/img/wasm-fsharp.png\u0026#34; } \u0026#34; Bolero\u0026#34; } } } div { attr.id \u0026#34;main\u0026#34;; comp\u0026lt;Client.Main.MyApp\u0026gt; } // rootComp boleroScript } } But how would you go about if you also want to put this into a html template?\nYou could replace the above code with a html template index.html:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;/\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;/\u0026gt; \u0026lt;title\u0026gt;Bolero Application\u0026lt;/title\u0026gt;\u0026lt;base href=\u0026#34;/\u0026#34;/\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.4/css/bulma.min.css\u0026#34;/\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/index.css\u0026#34;/\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;navbar is-dark\u0026#34; role=\u0026#34;navigation\u0026#34; aria-label=\u0026#34;main navigation\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-brand\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-item has-text-weight-bold is-size-5\u0026#34; href=\u0026#34;https://fsbolero.io\u0026#34;\u0026gt;\u0026lt;img style=\u0026#34;height:40px\u0026#34; src=\u0026#34;https://github.com/fsbolero/website/raw/master/src/Website/img/wasm-fsharp.png\u0026#34;/\u0026gt;\u0026amp;#xA0; Bolero\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; ${Body} \u0026lt;script src=\u0026#34;_framework/blazor.webassembly.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; and then call it inside index.fs:\ntype IndexTemplate = Bolero.Template\u0026lt;\u0026#34;index.html\u0026#34;\u0026gt; let page = let node = div { attr.id \u0026#34;main\u0026#34;; comp\u0026lt;Client.Main.MyApp\u0026gt; } IndexTemplate() .Body(node) .Elt() Note that the fsproj file has to be changed also:\n\u0026lt;ItemGroup\u0026gt; \u0026lt;Content Include=\u0026#34;index.html\u0026#34;\u0026gt; \u0026lt;CopyToOutputDirectory\u0026gt;PreserveNewest\u0026lt;/CopyToOutputDirectory\u0026gt; \u0026lt;/Content\u0026gt; \u0026lt;Compile Include=\u0026#34;Index.fs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;Startup.fs\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; If you now try to run in, you will get the following error:\nNow listening on: http://localhost:5000 Application started. Press Ctrl+C to shut down. warn: Bolero.Templating.Server.Impl.Watcher[0] Bolero HotReload: failed to reload /Users/mmgreiner/Projects/Scrap/BoloeroStaticApp/src/BoloeroStaticApp.Client/index.html We therefore also have to adjust Startup.fs to add the new template also to hot reload:\n#if DEBUG .AddHotReload(templateDir = __SOURCE_DIRECTORY__ + \u0026#34;/../BoloeroStaticApp.Client\u0026#34;) .AddHotReload(templateDir = __SOURCE_DIRECTORY__ + \u0026#34;/../BoloeroStaticApp.Server\u0026#34;) #endif Input files You develop F# code for the client side (inside the browser), which is compiled into WebAssembly. The views are either F# codes or Html templates.\nThe client contains predefined \u0026lt;input\u0026gt; types for text, numbers and booleans, but not for file uploads. How can this be done?\nThere are two potential approaches:\nUpload a file to the client and use the file\u0026rsquo;s data on the client.\nUpload a file to the client and pass it on to the server for more complex file data procedures.\nSimple example It contains predefined \u0026lt;input\u0026gt; types for text, numbers and booleans, but not for file uploads. How can this be done?\nClient side type Model = { Name: string } let init = { Name = \u0026#34;\u0026#34; } type Message = | SetName of string let update message model = match message with | SetName n -\u0026gt; { model with Name = n } let viewInput modelData setValue = input { attr.value modelData on.change (fun e -\u0026gt; setValue (unbox e.Value)) } let view model dispatch = div { input { attr.value = model.Name on.change (fun e -\u0026gt; dispatch (SetName (unbox e.Value))) } $\u0026#34;Hallo, {model.Name}!\u0026#34; } Now the problem is, that there exist views for \u0026lt;input\u0026gt; types string, numbers and booleans, but not for file input.\nUsing Blazor component [] TBD Further information See https://procodeguide.com/programming/file-upload-in-aspnet-core/ for an example how to implement file upload in Asp.Net Core 6.0.\nFurther tips Deploying to IIS If you deploy your Bolero app to IIS, and particularely to an IFS with a subfolder, your starting path will not be recognized. I ended up implementing this as follows:\nlet page (env: IWebHostEnvironment) = let root = if env.ContentRootPath.Contains(\u0026#34;inetpub\u0026#34;) then let s = env.ContentRootPath.Split(IO.Path.DirectorySeparatorChar) \u0026#34;/\u0026#34; + s.[s.Length-1] + \u0026#34;/\u0026#34; else \u0026#34;/\u0026#34; And in the html template:\n\u0026lt;head\u0026gt; \u0026lt;base href=\u0026#34;${Root}\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; Calling JavaScript How to call JavaScript is somewhat hidden in the documentation, you can find it under Bolero-Blazor\n","permalink":"http://localhost:1313/post/2022-08-21-Bolero/","summary":"\u003cp\u003eThis blog contains some experiences working with \u003ca href=\"https://fsbolero.io/docs/\"\u003eBolero\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBolero is a set of free and open-source libraries and tools to write web applications in \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e. With it, you can write fully dynamic client-side web applications from the comfort of a strongly-typed functional language, all with great performance.\u003c/p\u003e","title":"Bolero Hints"},{"content":"Machine learning with ML.NET is documented in a confusing way, in particular when it comes to F#.\nSome resources I found are:\nML.NET Cookbook ML.NET Samples Also has some F# samples, unfortunately not all. Binary Classification for mushrooms coded in C#, but interesting example. FSharpML is a light weight API written in F# on top of ML.NET. Supported classification Machine learning falls into two big categories [IBM]: supervised and unsupervised learning.\nSupervised learning algorithms are provided with a data set that has been prepared to contains the desired result, the label. Unsupervised learning does not have labels, but discovers patterns that help solve for clustering or association problems.\nSupervised learning covers two kinds of learning [IBM]:\nClassification algorithms classify the data into specific categories.\nRegression algorithms are used to understand the relationship between dependent and independent variables. It is typically used for projections.\nmlnet supports several of these algorithms, as indicated in the tutorial:\nClassification - Use this when you want to predict which category data belongs in (for example, analyzing sentiment of customer reviews as either positive or negative).\nImage classification - Use this when you want to predict which category an image belongs to (for example, predicting if an image is of a cat or a dog).\nRegression (for example, value prediction) - Use this when you want to predict a numeric value (for example, predicting house price).\nForecasting - Use this when you want to forecast future values in a time-series (for example, forecast quarterly sales).\nRecommendation - Use this when you want to recommend items to users based on historical ratings (for example, product recommendation).\nClassifications can be either binary (true / false) or by category (cold, warm, hot).\nTypical steps There are some typical steps to take during machine learning:\nData loading and preprocessing\nData processing / pipeline configuration and feature extraction\nTrain on data\nEvaluate the model\nPredict a new value\nData loading ML.NET doesn\u0026rsquo;t work with record types, so all data columns are only referenced by their names. This can be confusing.\nI\u0026rsquo;m using three data structues:\none to read in the data one how it looks after featurization into vectors one for the predictions. ta a simple example: learning a person\u0026rsquo;s gender from weight and height.\nThe csv training file looks like this:\n\u0026quot;Gender\u0026quot;,\u0026quot;Height\u0026quot;,\u0026quot;Weight\u0026quot; \u0026quot;Male\u0026quot;,73.847017017515,241.893563180437 \u0026quot;Male\u0026quot;,68.7819040458903,162.310472521300 \u0026quot;Male\u0026quot;,74.1101053917849,212.7408555565 ... \u0026quot;Female\u0026quot;,58.9107320370127,102.088326367840 \u0026quot;Female\u0026quot;,65.2300125077128,141.305822601420 \u0026quot;Female\u0026quot;,63.3690037584139,131.041402692995 Data structure The data structure I use:\ntype Person = { [\u0026lt;ColumnName(\u0026#34;Label\u0026#34;)\u0026gt;] Gender: boolean Height: single Weight: single } Couple things to notice:\nThe label to be learned should be called Label. If not, it may cause all kinds of confusion. You can rename it using ColumnName. For binary classifiers, the label should be boolean Numeric data should be either int or float32 or single. floatwill not compile. Typically, I first use FSharp.Data to read in the data. It also makes it very easy to read data from the web; and typically, the csv files are stored somewhere on github.\nopen FSharp.Data let csv = FSharp.Data.CsvFile.Load(githubrawUrl) printfn \u0026#34;headers: %A\u0026#34; csv.Headers let data\u0026#39; = csv.Rows |\u0026gt; Seq.map (fun r -\u0026gt; { Gender = r.[\u0026#34;Gender\u0026#34;] = \u0026#34;Female\u0026#34; Height = single r.[\u0026#34;Height\u0026#34;] Weight = single r.[\u0026#34;Weight\u0026#34;] }) Data preparation Now we enter mlnet. It uses DataViews to handle all data. As input we can give a sequence of data.\nopen Microsoft.ML open Microsoft.ML.Data let mlcontext = MLContext(seed = Nullable 1) let data = mlcontext.Data.LoadFromEnumerable(data\u0026#39;) |\u0026gt; mlcontext.Data.ShuffleRows let dataSplit = mlcontext.Data.TrainTestSplit(data, testFraction = 0.3) We are randomly shuffling the rows in order not to train on a pre-ordered dataset. 30% of the data is used for testing, 70% for training. Obviously, this split depends on the size of your input data.\nFeature extraction This is done in ML.NET using Transformations.\nopen Microsoft.ML.Transforms let dataPipeline = EstimatorChain() .Append(mlx.Transforms.NormalizeMinMax(outputColumnName = \u0026#34;fHeight\u0026#34;, inputColumnName = \u0026#34;Height\u0026#34;)) .Append(mlx.Transforms.NormalizeMinMax(\u0026#34;fWeight\u0026#34;, \u0026#34;Weight\u0026#34;)) .Append(mlx.Transforms.Concatenate(nameof(PersonVector_.Features), \u0026#34;fWeight\u0026#34;, \u0026#34;fHeight\u0026#34;)) The EstimatorChain, or pipeline steps, are build up of the following functions:\nnormalize the given data for Height and Weight into values between 0.0 and 1.0. The newly created columns are calle fHeight and fWeight, indicating that they have been featurized.\nNow we create one array of all the so-called features by concatenating these columns into one column \u0026quot;Features\u0026quot;.\nInspect intermediate data we would like to see whether the featurization process worked correctly. This is best done by defining a type PersonVector; it\u0026rsquo;s fields correspond exactly to the output column names above.\nData rows are lazy loaded - this means, they are not actually processed until we fit the data.\nThe data view can be enumerated using CreateEnumerable.\n[\u0026lt;CLIMutable\u0026gt;] type PersonVector = { Label: bool Features: single[] } let transformedData = dataPipeline.Fit(data).Transform(data) let d0 = mlx.Data.CreateEnumerable\u0026lt;PersonVector\u0026gt;(transformedData, reuseRowObject = false) printfn \u0026#34;first is %A\u0026#34; (Seq.head d0) Train We use a stochastic dual coordinate ascent (SDCA) method, as described here.\nWe also use a little trick to ensure that the column names correspond to the fields of the records.\n// to get the names of the fields let PersonVector_ = Unchecked.defaultof\u0026lt;PersonVector\u0026gt; let trainer = mlx.BinaryClassification.Trainers.SdcaLogisticRegression( labelColumnName = nameof(PersonVector_.Label), featureColumnName = nameof(PersonVector_.Features) ) let trainingPipeline = dataPipeline.Append(trainer) // train the model printfn \u0026#34;------ training\u0026#34; let trainedModel = trainingPipeline.Fit(dataSplit.TrainSet) ","permalink":"http://localhost:1313/post/2022-04-08-machine-learning/","summary":"\u003cp\u003eMachine learning with \u003ca href=\"https://dotnet.microsoft.com/en-us/learn/ml-dotnet\"\u003eML.NET\u003c/a\u003e is documented in a confusing way, in particular when it comes to F#.\u003c/p\u003e\n\u003cp\u003eSome resources I found are:\u003c/p\u003e","title":"Machine Learning with ML.NET"},{"content":"This post covers some more Jekyll tips and tricks like searching a web page.\nSearching a Jekyll page Web pages based on databases such as WordPress search the data in the underlying database. Static web sites based on Jekyll however don\u0026rsquo;t have this database but only files.\nGood descriptions of how they can be searched:\nVanilla js search Copy to Clipboard button See Add copy to clipboard in Jekyll\nLink on same page See this StackOverflow question.\nYou have to enable auto_ids in _config.yml:\nkramdown: auto_ids: true Then headlines have the id of the hyphon concatenated words. This chapter for example: link-on-same-page. Link to it using #link-on-same-page.\nPublish to OSX local apache server OSX has a local apache server build in, see Setting up a local web server.\nThe pages reside under ~\u0026lt;user\u0026gt;/Sites. Normally, you would create a sub-site in that directory, for instance: ~\u0026lt;user\u0026gt;/mypages.\nTo build your Jekyll static pages directly to that site, use (assuming the user is mmgreiner):\njekyll build --drafts -d ~/Sites/mypages --baseurl \u0026#34;~mmgreiner/mypages\u0026#34; Note the quotes on the last argument. If you don\u0026rsquo;t use these quotes, the shell will expand the ~ and it will pass the wrong base url.\nYou can now browse to http://localhost/~mmgreiner/mypages to see your Jekyll build local static pages.\n","permalink":"http://localhost:1313/post/2022-04-03-jekyll-tips/","summary":"\u003cp\u003eThis post covers some more Jekyll tips and tricks like searching a web page.\u003c/p\u003e\n\u003ch2 id=\"searching-a-jekyll-page\"\u003eSearching a Jekyll page\u003c/h2\u003e\n\u003cp\u003eWeb pages based on databases such as \u003ca href=\"https://wordpress.com\"\u003eWordPress\u003c/a\u003e search the data in the underlying database. Static web sites based on \u003ca href=\"https://jekyllrb.com\"\u003eJekyll\u003c/a\u003e however don\u0026rsquo;t have this database but only files.\u003c/p\u003e","title":"Jekyll Tips \u0026 Tricks"},{"content":"Mathematical formulas While working on post Mathe Uffzig, I stumbled upon the problem of displaying mathematical formulas in the Jekyll markdown templating engine Liquid.\nSearching the web, I found this blog: Creating a mathematics blog with Jekyll.\nThe basic ideas is to use MathJax to visualize the formulars. This JavaScript has to be included in the layouts.\nTo do so, I found two ways: Changing the default.html page or including the scripts locally.\nChanging default.html This is explained in more detail in the Jekyll documentation on layouts.\nFirst, get the default.html file from the theme folder. to open this, use:\n# on unix open $(bundle info --path minima) Then create a folder _layouts and the file default.html. Copy from the minima the default.html file to into here and add two lines:\n{% raw %}\u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;{% endraw %} Now, restart the jekyll server.\nYou can now insert $$ x = y ^ 2 $$ into your markdown and it displays as a nice math formula:\n$$ x = y^2 $$\nLocal include Another way, which doesn\u0026rsquo;t require any changes to default.html, is with include.\nCreate the file _includes/mathscripts.html with the following content:\n{% raw %}\u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;{% endraw %} Now in the post that uses math scripts, include the line {% include mathscripts.html %}. That\u0026rsquo;s it!\nMath expressions in Hugo Using the Hugo templating engine, we have to take a different approach. One that I found is using the Katex Javascript library for math expressions.\nI have found the following instructions to set up math expressions with Hugo, one from this blog and another from the author of the PaperMod theme\nThere are basically three steps involved:\ncreate a partial that includes the necessary scripts include those scripts in the header Enable math either globally or per page. Create Partial Create a partial under /layouts/partials/math.html with the following content (taken from Katex Autorender extension):\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false}, {left: \u0026#39;\\\\(\u0026#39;, right: \u0026#39;\\\\)\u0026#39;, display: false}, {left: \u0026#39;\\\\[\u0026#39;, right: \u0026#39;\\\\]\u0026#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); \u0026lt;/script\u0026gt; Double dollar signs will be displayed as blocks, single dollar sign inline.\nInclude scripts Include the script in the extend_head.html, which should reside in themes/.../layouts/partials/extend_head.html:\n{{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} ### Include in front matter\nIn your page\u0026rsquo;s front matter, include:\n--- ... math: true --- feerr\nMath code blocks One issue is, that all these pages are typically stored on github, which uses again it\u0026rsquo;s own way how to display math equations. It seems that code blocks of type math are the future.\nWith version 0.93.0, Hugo allows extensions to the rendering of code blocks, see render hooks.\nYou have to add the file render-codeblock-math.html.\nlayouts ├── _default │ └── _markup │ └── render-codeblock-math.html ├── partials │ └── math.html This file contains the following brief segment:\n\u0026lt;p\u0026gt; {{- .Inner | safeHTML }} \u0026lt;/p\u0026gt; Now the codeblock with language math will render to a paragraph with the math block expression inside (with double dollars), which will be picked up by Katex.\nLinebreaks I had some difficulties generating multi-line math equations. I ended up using \\cr for a line break, since double backslash did not work.\nHugo version 0.122 With version v0.122.0, hugo has its own support of mathematics in markdown. See there for further information.\n","permalink":"http://localhost:1313/post/2022-04-02-math-static-sites/","summary":"\u003ch2 id=\"mathematical-formulas\"\u003eMathematical formulas\u003c/h2\u003e\n\u003cp\u003eWhile working on post \u003ca href=\"http://localhost:1313/post/2022-04-02-mathe-uffzgi/\"\u003eMathe Uffzig\u003c/a\u003e, I stumbled upon the problem of displaying mathematical formulas in the \u003ca href=\"https://jekyllrb.com\"\u003eJekyll\u003c/a\u003e markdown templating engine \u003ca href=\"liquid\"\u003eLiquid\u003c/a\u003e.\u003c/p\u003e","title":"Math formulas and static web site generators"},{"content":"Once in a while, I\u0026rsquo;m supporting Lea with her math homework (Swiss: Uffzgi). Here are some tools that help me (remember, that I prefer F# to other languages. Whenever possible, I use interactive Notebooks and make them available on github Notebooks.\nMitternachtsformel The quadractic formula is called Mitternachtsformel in German speaking schools, since the student is supposed to know it by heart even when suddenly woken up after midnight.\nIt goes like this:\n$$ (x_1, x_2) = \\frac{ - b \\pm \\sqrt {b^2 - 4ac} }{2a} $$\nwhen\n$$ ax^2 + bx + c = 0 $$\nIt can easily be computed in F# using this piece of code:\nlet mitternacht (a: float) b c = let cof = sqrt (b * b - 4.0 * a * c) let den = 2.0 * a ( (-1.0 * b + cof) / den, (-1.0 * b - cof) / den) Try it:\nmitternacht 1.0 -4.0 -5.0 |\u0026gt; printfn \u0026#34;%A\u0026#34; // returns (5.0, -1.0) Microsoft Math Solver A simple way is to use the Microsoft Math Solver. You can type in the mathematical equation like\nx^2 - 4x - 5 = 0 and it will return the solution and visualizes the graph.\nSample Microsoft Math Solver Symbolic algebra and F# There is an interesting library out there called Math.NET Symbolics. It can be used to do algebraic calculations.\nFirst, the variables are declared as symbols:\nopen System.Numerics open MathNet.Numerics open MathNet.Symbolics open Operators let x = symbol \u0026#34;x\u0026#34; let y = symbol \u0026#34;y\u0026#34; let a = symbol \u0026#34;a\u0026#34; let b = symbol \u0026#34;b\u0026#34; let c = symbol \u0026#34;c\u0026#34; let d = symbol \u0026#34;d\u0026#34; let aa = a + a let kompliziert = (a/b/(c*a))*(c*d/a)/d Now it can be used to simplify formulas. They can be printed using Infix.format.\na + a // return 2*a kompliziert |\u0026gt; Infix.format // returns 1/(a*b) Formulas can also be turned int LaTeX:\nkompliziert |\u0026gt; LaTex.format // returns \\frac{1}{ab} And this LaTeX can then be used in markdown documents. How to do this with Jekyll, is shown in the post Liquid tricks.\nlet symbols = Map.ofList [ \u0026#34;a\u0026#34;, FloatingPoint.Real 2.0; \u0026#34;b\u0026#34;, FloatingPoint.Real 3.0 ] Evaluate.evaluate symbols (1/(a*b)) // Returns Real 0.1666666667 (as float) Unfortunately, this crashed for me. See also as notebook on github\nMathematical graphs For visualization, I typically use Plotly.NET.\nAn example of plotting herbizide influence on plant growth can be found as an interactive F# notebook.\n","permalink":"http://localhost:1313/post/2022-04-02-mathe-uffzgi/","summary":"\u003cp\u003eOnce in a while, I\u0026rsquo;m supporting Lea with her math homework (Swiss: \u003cem\u003eUffzgi\u003c/em\u003e). Here are some tools that help me (remember, that I prefer \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e to other languages. Whenever possible, I use interactive Notebooks and make them available on \u003ca href=\"https://github.com/mmgreiner/Notebook\"\u003egithub Notebooks\u003c/a\u003e.\u003c/p\u003e","title":"Mathe Uffzgi"},{"content":"This post shows various ways to handle input using WebSharper.\nClient side There are two basic approaches: using HTML templates or using Websharper\u0026rsquo;s HTML.\nHTML templates give a clean separation between design and function, and you can change the HTML file without recompiling. But there are some limits to it also.\nHTML Templating On the client side, you can combine reactive variables with input html elements.\n\u0026lt;label\u0026gt; Any text: \u0026lt;input type=\u0026#34;text\u0026#34; ws-var=\u0026#34;T1\u0026#34; placeholder=\u0026#34;enter any text\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Any number: \u0026lt;input type=\u0026#34;number\u0026#34; ws-var=\u0026#34;N1\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Any date: \u0026lt;input type=\u0026#34;date\u0026#34; ws-var=\u0026#34;D1\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Phone number: \u0026lt;input type=\u0026#34;tel\u0026#34; ws-var=\u0026#34;Tel\u0026#34; placeholder=\u0026#34;Phonenumber\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Password: \u0026lt;input type=\u0026#34;password\u0026#34; ws-var=\u0026#34;PW\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; OnInput: \u0026lt;input type=\u0026#34;text\u0026#34; ws-oninput=\u0026#34;OnInput\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Checkbox: \u0026lt;input type=\u0026#34;checkbox\u0026#34; ws-var=\u0026#34;Check\u0026#34; /\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt; Selection: \u0026lt;select ws-var=\u0026#34;Color\u0026#34;\u0026gt; \u0026lt;option\u0026gt;green\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;blue\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;yellow\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;p\u0026gt; Text = ${T1}, Number = ${N1}, Check = ${Check} \u0026lt;/p\u0026gt; And in the code:\n[\u0026lt;JavaScript\u0026gt;] module Client = let t1 = Var.Create \u0026#34;\u0026#34; let n1 = Var.Create 0 let d1 = Var.Create \u0026#34;\u0026#34; let tel = Var.Create \u0026#34;\u0026#34; let pw = Var.Create \u0026#34;\u0026#34; let check = Var.Create true let color = Var.Create \u0026#34;\u0026#34; let n2: Var\u0026lt;Client.CheckedInput\u0026lt;int\u0026gt;\u0026gt; = Var.Create (Client.CheckedInput\u0026lt;int\u0026gt;.Blank \u0026#34;0\u0026#34;) let Main () = MainTemplate() .T1(t1) .N1(n1) .D1(d1) .Tel(tel) .PW(pw) .Check(check) .Color(color) .N2(n2) .OnInput(fun ev -\u0026gt; printfn \u0026#34;ev = %A\u0026#34; ev.Target) .Doc() Handling of select The HTML code is straight forward:\n\u0026lt;label\u0026gt; Primary Colors: \u0026lt;select ws-var=\u0026#34;PrimaryColor\u0026#34; ws-hole=\u0026#34;PrimaryColorList\u0026#34;\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/label\u0026gt; However, the following fsharp will fail:\n[\u0026lt;JavaScript\u0026gt;] ... type Color = Red | Yellow | Blue let primary = Var.Create PrimaryColors.Blue let primaryColors = FSharp.Reflection.FSharpType.GetUnionCases typeof\u0026lt;PrimaryColors\u0026gt; |\u0026gt; Array.map (fun uc -\u0026gt; uc.Name) |\u0026gt; Array.map (fun col -\u0026gt; Tags.option [] [text col]) Template() .PrimaryColor(primary) .PrimaryColorsList(primaryColors) It fails for two reasons:\nHTML templating can only handle variables of numeric or string types FSharpType does not exist for JavaScript. So during compilation, it will claim WebSharper error FS9001: Type not found in JavaScript compilation: Microsoft.FSharp.Reflection.FSharpType. So try this:\nlet primary = Var.Create (sprintf \u0026#34;%A\u0026#34; PrimaryColors.Blue) let primaryColors = [ Red; Yellow; Blue] |\u0026gt; Seq.map (sprintf \u0026#34;%A\u0026#34;) |\u0026gt; Seq.map (fun col -\u0026gt; Tags.option [] [text col]) Unfortunately, i did not find an easy way to enumerate over the union, therefore the explicit list [ Red; Yellow; Blue].\nWebSharper HTML to be done\nFile input To use input type file for uploading a file, there are two possibilities: posting a form and handle the input in the server, or handle it on the client.\nHere we discuss handling it on a client. Further information can be found in at Mozilla or on W3Docs.\nIn JavaScript, the corresponding code looks as shown below. The actual content of the file is given in the fileReader.result.\n\u0026lt;body\u0026gt; \u0026lt;input onchange=\u0026#34;readFile(this)\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;script\u0026gt; function readFile(input) { let file = input.files[0]; let fileReader = new FileReader(); fileReader.readAsText(file); fileReader.onload = function() { alert(fileReader.result); }; fileReader.onerror = function() { alert(fileReader.error); }; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; In the WebSharper html template, we use an ws-oninput trigger.\n\u0026lt;label\u0026gt; file Load: \u0026lt;input type=\u0026#34;file\u0026#34; ws-oninput=\u0026#34;LoadFile\u0026#34;\u0026gt; \u0026lt;/label\u0026gt; In F#, we the input event contains the fields Target and Event. We use target and cast it to HTMLInputElement. Two event handlers are used: Onload and Onerror. The handlers are called from the ReadAsText function. In this simple example, we just print the content of the text file to the console.\nopen WebSharper.UI.Html open WebSharper.JavaScript TemplateMain() .LoadFile(fun event -\u0026gt; let inputElem = ev.Target :?\u0026gt; HTMLInputElement let files = inputElem.Files for i in 0 .. files.Length-1 do let file = files.[i] printfn \u0026#34;file = %s, %i\u0026#34; file.Name file.Size let reader = new TextFileReader() reader.Onload \u0026lt;- (fun _ -\u0026gt; printfn \u0026#34;reader = %s\u0026#34; reader.Result) reader.Onerror \u0026lt;- (fun _ -\u0026gt; sprintf \u0026#34;cannot read %s\u0026#34; file.Name |\u0026gt; JS.Alert) reader.ReadAsText(file) ) ","permalink":"http://localhost:1313/post/2022-03-17-Simple-Inputs/","summary":"\u003cp\u003eThis post shows various ways to handle input using \u003ca href=\"\nhttps://developers.websharper.com/docs/v4.x/fs/\n\"\u003eWebSharper\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"client-side\"\u003eClient side\u003c/h2\u003e\n\u003cp\u003eThere are two basic approaches: using HTML templates or using Websharper\u0026rsquo;s HTML.\u003c/p\u003e","title":"WebSharper simple inputs"},{"content":"Installing WebSharper I\u0026rsquo;m developing web applications using WebSharper on macOS Monterey.\nTo install the the templates, use:\n% dotnet new -i WebSharper.Templates The following templates are installed:\n% dotnet new --list websh These templates matched your input: \u0026#39;websh\u0026#39; Template Name Short Name Language Tags -------------------------------------- --------------- -------- -------------- WebSharper 5 Client-Server Application websharper-web [C#],F# WebSharper/Web WebSharper 5 Extension websharper-ext F# WebSharper WebSharper 5 Html Site websharper-html [C#],F# WebSharper/Web WebSharper 5 Library websharper-lib [C#],F# WebSharper WebSharper 5 Minimal Application websharper-min [C#],F# WebSharper/Web WebSharper 5 Proxy websharper-prx [C#],F# WebSharper WebSharper 5 Single Page Application websharper-spa [C#],F# WebSharper/Web To create a project, use dotnet new websharper-web -lang F# -o outputFolder.\nAfter the project has been created, the project file looks as follows:\n\u0026lt;Project Sdk=\u0026#34;Microsoft.NET.Sdk.Web\u0026#34;\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;Compile Include=\u0026#34;Client.fs\u0026#34; /\u0026gt; \u0026lt;Compile Include=\u0026#34;Startup.fs\u0026#34; /\u0026gt; \u0026lt;None Include=\u0026#34;wsconfig.json\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper\u0026#34; Version=\u0026#34;5.0.0.120\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.FSharp\u0026#34; Version=\u0026#34;5.0.0.120\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.UI\u0026#34; Version=\u0026#34;5.0.0.120\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.AspNetCore\u0026#34; Version=\u0026#34;5.0.0.120\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; \u0026lt;/Project\u0026gt; These 5.0... versions of WebSharper do not compile on OSX:\ndotnet build Microsoft (R) Build Engine version 17.0.0+c9eb9dd64 for .NET Copyright (C) Microsoft Corporation. All rights reserved. Determining projects to restore... All projects are up-to-date for restore. chmod: /Users/XXX/.nuget/packages/websharper.fsharp/5.0.0.120/build//../tools/net5.0/osx-x64//wsfsc.sh: No such file or directory /Users/XXX/.nuget/packages/websharper.fsharp/5.0.0.120/build/WebSharper.FSharp.targets(61,5): error MSB3073: The command \u0026#34;chmod u+x \u0026#39;/Users/XXX/.nuget/packages/websharper.fsharp/5.0.0.120/build//../tools/net5.0/osx-x64//wsfsc.sh\u0026#39;\u0026#34; exited with code 1. [/Users/XXX/Projects/mywebsharper/Exercise1/Exercise1.fsproj] Build FAILED. Problem seems to be that for version 5 of [WebSharper][websharper-home], the targets for osx-x64 are missing:\n% ls /Users/XXX/.nuget/packages/websharper.fsharp/5.0.0.120/build//../tools/net5.0 linux-musl-x64\tlinux-x64\twin-x64 Remidy Change all the references to 5.0... in the project file to 4.*:\n\u0026lt;ItemGroup\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper\u0026#34; Version=\u0026#34;4.*\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.FSharp\u0026#34; Version=\u0026#34;4.*\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.UI\u0026#34; Version=\u0026#34;4.*\u0026#34; /\u0026gt; \u0026lt;PackageReference Include=\u0026#34;WebSharper.AspNetCore\u0026#34; Version=\u0026#34;4.*\u0026#34; /\u0026gt; \u0026lt;/ItemGroup\u0026gt; Another way is to set a variable for the version:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;TargetFramework\u0026gt;net5.0\u0026lt;/TargetFramework\u0026gt; \u0026lt;WSVersion\u0026gt;4.*\u0026lt;/WSVersion\u0026gt; \u0026lt;/PropertyGroup\u0026gt; ... \u0026lt;PackageReference Include=\u0026#34;WebSharper\u0026#34; Version=\u0026#34;$(WSVersion)\u0026#34; /\u0026gt; ","permalink":"http://localhost:1313/post/2022-03-14-Websharper-osx/","summary":"\u003ch2 id=\"installing-websharper\"\u003eInstalling WebSharper\u003c/h2\u003e\n\u003cp\u003eI\u0026rsquo;m developing web applications using \u003ca href=\"\nhttps://developers.websharper.com/docs/v4.x/fs/\n\"\u003eWebSharper\u003c/a\u003e on macOS Monterey.\u003c/p\u003e\n\u003cp\u003eTo install the the templates, use:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e% dotnet new -i WebSharper.Templates\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe following templates are installed:\u003c/p\u003e","title":"Websharper OSX"},{"content":"WebSharper allows several ways to instatiate HTML, and It took me some thinking to get these terms right:\nws-replace ws-hole ws-template ws-template-children Replace Replace the given node with the provided string or list of docs.\n\u0026lt;div ws-replace=\u0026#34;Body\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; MyTemplate() .Body(h1 [] [text \u0026#34;Hallo\u0026#34;]) .Doc() \u0026lt;h1\u0026gt;Hallo\u0026lt;/h1\u0026gt; Hole Fills the child nodes with the given string or sequence of Docs.\n\u0026lt;div ws-hole=\u0026#34;Body\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; MyTemplate().Body(h1 [] [text \u0026#34;Hallo\u0026#34;]) \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hallo\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; Template \u0026lt;div ws-template=\u0026#34;MyParagraph\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Hallo ${Name} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; MyTemplate.MyParagraph().Name(\u0026#34;Markus\u0026#34;) \u0026lt;div\u0026gt; \u0026lt;p\u0026gt; Hallo Markus \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; Holes and Templates Holes and templates are often used to fill lists:\n\u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;div ws-replace=\u0026#34;MyItems\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div ws-template=\u0026#34;MyItem\u0026#34;\u0026gt; \u0026lt;li\u0026gt;Item: ${Name}\u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div let viewMyItem item = MyTemplate.MyItem() .Name(item) .Doc() MyTemplate.MyItems( [ \u0026#34;Apples\u0026#34;; \u0026#34;Pears\u0026#34;] |\u0026gt; Seq.map viewMyItem |\u0026gt; Doc.Concat ) .Doc() \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hallo\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; ","permalink":"http://localhost:1313/post/2022-03-13-websharper-templates/","summary":"\u003cp\u003eWebSharper allows several ways to instatiate HTML, and It took me some thinking to get these terms right:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ews-replace\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ews-hole\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ews-template\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ews-template-children\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"replace\"\u003eReplace\u003c/h2\u003e\n\u003cp\u003eReplace the given node with the provided string or list of docs.\u003c/p\u003e","title":"WebSharper templates"},{"content":"Websharper Shopping cart I found an interesting article from 2020 by Adam Granizc on the implementation of a WebSharper shopping cart in WebSharper Shopping Cart\nUnfortunately, the code was not published, and as an exercise, I wanted to re-implement it in two ways:\nas shown in the article using the reactive UI as an elmish MVU implementation I found the code later in github. Starting from there, I\u0026rsquo;m working on int in github.\n","permalink":"http://localhost:1313/post/2022-03-13-websharper-shopping-cart/","summary":"\u003ch2 id=\"websharper-shopping-cart\"\u003eWebsharper Shopping cart\u003c/h2\u003e\n\u003cp\u003eI found an interesting article from 2020 by Adam Granizc on the implementation of a WebSharper shopping cart in \u003ca href=\"https://github.com/intellifactory/blogs/blob/master/user/granicz/20201231-variations-for-a-websharper-shopping-cart.md\"\u003eWebSharper Shopping Cart\u003c/a\u003e\u003c/p\u003e","title":"WebSharper shopping cart"},{"content":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.\nPost filenames Jekyll requires blog post files to be named according to the following format:\nYEAR-MONTH-DAY-title.MARKUP\nWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file, for instance .md. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.\nJekyll also offers powerful support for code snippets:\ndef print_hi(name) puts \u0026#34;Hi, #{name}\u0026#34; end print_hi(\u0026#39;Tom\u0026#39;) #=\u0026gt; prints \u0026#39;Hi, Tom\u0026#39; to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.\nInstalling Under OSX, the following line has to be added to the Gemfile:\ngem \u0026#34;github-pages\u0026#34;, \u0026#34;~\u0026gt; 225\u0026#34;, group: :jekyll_plugins gem \u0026#34;webrick\u0026#34; Deploying These posts are stored at GitHub and published to Github Pages mmgreiner.github.io.\nCompiling To compile into pages, use:\n% bundle exec jekyll serve Supported languages To find out which programming languages are supported, use rogify:\n% rogify list == Available Lexers == abap: SAP - Advanced Business Application Programming actionscript: ActionScript [aliases: as,as3] ada: The Ada 2012 programming language apache: configuration files for Apache web server ... yaml: Yaml Ain\u0026#39;t Markup Language (yaml.org) [aliases: yml] yang: Lexer for the YANG 1.1 modeling language (RFC7950) zig: The Zig programming language (ziglang.org) [aliases: zir] ","permalink":"http://localhost:1313/post/2022-03-12-using-jekyll/","summary":"\u003cp\u003eYou’ll find this post in your \u003ccode\u003e_posts\u003c/code\u003e directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run \u003ccode\u003ejekyll serve\u003c/code\u003e, which launches a web server and auto-regenerates your site when a file is updated.\u003c/p\u003e","title":"Using Jekyll"},{"content":"A Swiss nick name for Markus is Küse, and since I love alliterations, this blog is called Küse’s Code.\nIt contains a collection of code snippets, and demonstrates my various interest, starting with functional programming in F#, and web programming in WebSharper or Bolero, and Elm.\nLately, I have added the programming languages Go and Ruby to my portfolio and Ruby on Rails for web development.\nThis blog was originally written as a static HTML site using Jekyll, and later moved to Hugo.\nSky Parkway, VA These posts are stored at GitHub and published as Github Pages mmgreiner.github.io.\n","permalink":"http://localhost:1313/about/","summary":"\u003cp\u003eA Swiss nick name for Markus is Küse, and since I love alliterations, this blog is called Küse’s Code.\u003c/p\u003e\n\u003cp\u003eIt contains a collection of code snippets, and demonstrates my various interest, starting with functional programming\nin \u003ca href=\"https://fsharp.org\"\u003eF#\u003c/a\u003e, and web programming\nin \u003ca href=\"https://developers.websharper.com/docs/v4.x/fs/\"\u003eWebSharper\u003c/a\u003e or \u003ca href=\"https://fsbolero.io\"\u003eBolero\u003c/a\u003e, and \u003ca href=\"https://elm-lang.org/\"\u003eElm\u003c/a\u003e.\u003c/p\u003e","title":"About me"},{"content":"Install phpmyadmin with brew ==\u0026gt; Pouring phpmyadmin--5.2.1.sonoma.bottle.tar.gz ==\u0026gt; Caveats To enable phpMyAdmin in Apache, add the following to httpd.conf and restart Apache: Alias /phpmyadmin /usr/local/share/phpmyadmin \u0026lt;Directory /usr/local/share/phpmyadmin/\u0026gt; Options Indexes FollowSymLinks MultiViews AllowOverride All \u0026lt;IfModule mod_authz_core.c\u0026gt; Require all granted \u0026lt;/IfModule\u0026gt; \u0026lt;IfModule !mod_authz_core.c\u0026gt; Order allow,deny Allow from all \u0026lt;/IfModule\u0026gt; \u0026lt;/Directory\u0026gt; Then open http://localhost/phpmyadmin The configuration file is /usr/local/etc/phpmyadmin.config.inc.php ==\u0026gt; Summary 🍺 /usr/local/Cellar/phpmyadmin/5.2.1: 4,191 files, 48.1MB ==\u0026gt; Running `brew cleanup phpmyadmin`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). Where is httpd.conf?\n% httpd -V [Mon Dec 18 07:42:30.160858 2023] [so:notice] [pid 4802] AH06662: Allowing module loading process to continue for module at /usr/local/opt/php/lib/httpd/modules/libphp.so because module signature matches authority \u0026#34;Markus Greiner\u0026#34; specified in LoadModule directive Server version: Apache/2.4.56 (Unix) Server built: Sep 30 2023 04:15:00 Server\u0026#39;s Module Magic Number: 20120211:126 Server loaded: APR 1.5.2, APR-UTIL 1.5.4, PCRE 8.44 2020-02-12 Compiled using: APR 1.5.2, APR-UTIL 1.5.4, PCRE 8.44 2020-02-12 Architecture: 64-bit Server MPM: prefork threaded: no forked: yes (variable process count) Server compiled with.... -D APR_HAS_SENDFILE -D APR_HAS_MMAP -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled) -D APR_USE_FLOCK_SERIALIZE -D APR_USE_PTHREAD_SERIALIZE -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT -D APR_HAS_OTHER_CHILD -D AP_HAVE_RELIABLE_PIPED_LOGS -D DYNAMIC_MODULE_LIMIT=256 -D HTTPD_ROOT=\u0026#34;/usr\u0026#34; -D SUEXEC_BIN=\u0026#34;/usr/bin/suexec\u0026#34; -D DEFAULT_PIDLOG=\u0026#34;/private/var/run/httpd.pid\u0026#34; -D DEFAULT_SCOREBOARD=\u0026#34;logs/apache_runtime_status\u0026#34; -D DEFAULT_ERRORLOG=\u0026#34;logs/error_log\u0026#34; -D AP_TYPES_CONFIG_FILE=\u0026#34;/private/etc/apache2/mime.types\u0026#34; -D SERVER_CONFIG_FILE=\u0026#34;/private/etc/apache2/httpd.conf\u0026#34; -D SERVER_CONFIG_FILE=\nAdd to the file.\nrestart apache\nsudo apachectl restart now you should see it under: http://localhost/phpmyadmin\n## Installing wordpress\nhttps://developer.wordpress.org/advanced-administration/before-install/howto-install/\nPassword: EM7zcN0*WmIwZ7ml)s\n","permalink":"http://localhost:1313/draft/2023-12-18-wordpress/","summary":"\u003ch2 id=\"install-phpmyadmin-with-brew\"\u003eInstall phpmyadmin with brew\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e==\u0026gt; Pouring phpmyadmin--5.2.1.sonoma.bottle.tar.gz\n==\u0026gt; Caveats\nTo enable phpMyAdmin in Apache, add the following to httpd.conf and\nrestart Apache:\n    Alias /phpmyadmin /usr/local/share/phpmyadmin\n    \u0026lt;Directory /usr/local/share/phpmyadmin/\u0026gt;\n        Options Indexes FollowSymLinks MultiViews\n        AllowOverride All\n        \u0026lt;IfModule mod_authz_core.c\u0026gt;\n            Require all granted\n        \u0026lt;/IfModule\u0026gt;\n        \u0026lt;IfModule !mod_authz_core.c\u0026gt;\n            Order allow,deny\n            Allow from all\n        \u0026lt;/IfModule\u0026gt;\n    \u0026lt;/Directory\u0026gt;\nThen open http://localhost/phpmyadmin\nThe configuration file is /usr/local/etc/phpmyadmin.config.inc.php\n==\u0026gt; Summary\n🍺  /usr/local/Cellar/phpmyadmin/5.2.1: 4,191 files, 48.1MB\n==\u0026gt; Running `brew cleanup phpmyadmin`...\nDisable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.\nHide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWhere is httpd.conf?\u003c/p\u003e","title":""},{"content":"EDI middleware Comparisons https://www.g2.com/categories/electronic-data-interchange-edi\nhttps://michaelachrisco.github.io/Electronic-Interchange-Github-Resources/\nhttps://datainterchange.com/edifacts-standards-explained/\nAntlr An Antlr implementation: https://github.com/aaronhuggins/js-edi/tree/main/grammars/fact\n// Special token for discovering the position of control characters for a given EDI document. ControlChar: Special { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) } | CR LF { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) } | CR { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) } | LF { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) } | AsciiControl { this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }; // All valid printable characters. Char: Letter | Number | Special { !this.isCtlCharPos }? { this.handleControlChars(EdiFactLexer) }; // Reserved segment tags. SvcStringAdvice: \u0026#39;UNA\u0026#39; { this.handleUNA() }; InterchangeHeader: \u0026#39;UNB\u0026#39;; InterchangeTrailer: \u0026#39;UNZ\u0026#39;; GroupHeader: \u0026#39;UNG\u0026#39;; GroupTrailer: \u0026#39;UNE\u0026#39;; MessageHeader: \u0026#39;UNH\u0026#39;; MessageTrailer: \u0026#39;UNT\u0026#39;; TextSegment: \u0026#39;TXT\u0026#39;; SectionControl: \u0026#39;UNS\u0026#39;; Go Omniparser is a general purpose parser written in Go:\nOmniparser is a native Golang ETL parser that ingests input data of various formats (CSV, txt, fixed length/width, XML, EDI/X12/EDIFACT, JSON, and custom formats) in streaming fashion and transforms data into desired JSON output based on a schema written in JSON.\nhttps://github.com/jf-tech/omniparser/blob/master/doc/edi_in_depth.md\nhttps://github.com/kdar/health/tree/master/edifact/parse has and hand-written parser and lexer.\nhttps://pkg.go.dev/github.com/kdar/health/edifact\nhttps://bots.readthedocs.io/en/latest/configuration/grammars/\n","permalink":"http://localhost:1313/draft/20240530-EDI/","summary":"\u003ch1 id=\"edi-middleware\"\u003eEDI middleware\u003c/h1\u003e\n\u003ch2 id=\"comparisons\"\u003eComparisons\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.g2.com/categories/electronic-data-interchange-edi\"\u003ehttps://www.g2.com/categories/electronic-data-interchange-edi\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://michaelachrisco.github.io/Electronic-Interchange-Github-Resources/\"\u003ehttps://michaelachrisco.github.io/Electronic-Interchange-Github-Resources/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://datainterchange.com/edifacts-standards-explained/\"\u003ehttps://datainterchange.com/edifacts-standards-explained/\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"antlr\"\u003eAntlr\u003c/h2\u003e\n\u003cp\u003eAn Antlr implementation: \u003ca href=\"https://github.com/aaronhuggins/js-edi/tree/main/grammars/fact\"\u003ehttps://github.com/aaronhuggins/js-edi/tree/main/grammars/fact\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-antlr\" data-lang=\"antlr\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Special token for discovering the position of control characters for a given EDI document.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eControlChar:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSpecial\u003c/span\u003e { this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCR\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLF\u003c/span\u003e { this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCR\u003c/span\u003e { this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLF\u003c/span\u003e { this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eAsciiControl\u003c/span\u003e { this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// All valid printable characters.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eChar:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eLetter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNumber\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eSpecial\u003c/span\u003e { !this.isCtlCharPos }\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e { this.handleControlChars(EdiFactLexer) };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Reserved segment tags.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSvcStringAdvice: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNA\u0026#39;\u003c/span\u003e { this.handleUNA() };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInterchangeHeader: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNB\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInterchangeTrailer: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNZ\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGroupHeader: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNG\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGroupTrailer: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNE\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMessageHeader: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNH\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMessageTrailer: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNT\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTextSegment: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;TXT\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSectionControl: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UNS\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"go\"\u003eGo\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/jf-tech/omniparser\"\u003eOmniparser\u003c/a\u003e is a general purpose parser written in Go:\u003c/p\u003e","title":""}]